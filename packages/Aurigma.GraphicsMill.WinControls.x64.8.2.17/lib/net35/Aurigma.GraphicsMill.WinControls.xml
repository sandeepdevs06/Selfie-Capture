<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aurigma.GraphicsMill.WinControls</name>
    </assembly>
    <members>
        <member name="N:Aurigma.GraphicsMill.WinControls" draft="yes">
            <summary>The <see cref="N:Aurigma.GraphicsMill.WinControls" /> namespace contains classes related to Graphics Mill for .NET Windows controls which leverage using Graphics Mill for .NET in desktop Windows applications. These controls enable you to display an image, zoom it, pan, select a portion of an image, as well as print it. Also, it includes controls which allow to handle multiple images and vector objects within one work area (move, resize, rotate, etc).</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.BitmapViewer">
            <summary>This class represents scrollable viewport control.</summary>
            <remarks><para>This class is intended to display the image represented by the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> object. It allows zooming and scrolling the displayed image. Also, you can add a rubberband rectangle (e.g. use it to select a portion of the image).</para><para>To set the image which should be displayed, use the <see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.Bitmap" /> property. You can either here assign an instance of the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> class or call loading/creating methods of this class directly. </para><para>A number of members specifies the behavior of the image displaying. </para><list type="bullet"><item><term><see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.AutoUpdate" /> property</term><description>when <b>true</b>, the control is automatically redrawn whenever the image stored in the <see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.Bitmap" /> property is changed.</description></item><item><term><see cref="E:Aurigma.GraphicsMill.WinControls.ViewerBase.WorkspaceChanged" /> event</term><description>fires when the image stored in the <see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.Bitmap" /> property is updated. </description></item><item><term><see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.ScaleToActualSize" /> property</term><description>when <b>true</b>, the control takes into the account the resolution of the image. This way you will see the image in its physical size. Also you can properly handle situations when the horizontal and vertical resolutions are different (typical for fax images). </description></item><item><term><see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.AlphaEnabled" /> property</term><description>when <b>true</b>, and the image contains transparent or semi-transparent areas (alpha channel available), it is handled properly (alpha blending is used). Otherwise alpha channel is ignored. Alpha blending is working slower than common pixels copying, so it is recommended to disable this feature when it is not necessary.</description></item><item><term><see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.ColorManagementEngine" /> property</term><description>when <see cref="F:Aurigma.GraphicsMill.Transforms.ColorManagementEngine.LittleCms" /> the control uses the <b>LittleCMS</b> color management engine during displaying. When <see cref="F:Aurigma.GraphicsMill.Transforms.ColorManagementEngine.AdobeCmm" /> the control uses the <b>Adobe CMM</b> color management engine during displaying. If the color management is disabled (the <see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.ColorManagementEngine" /> property is <see cref="F:Aurigma.GraphicsMill.Transforms.ColorManagementEngine.None" />) colors are displayed less accurate, but it working faster.</description></item><item><term><see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Zoom" /> property</term><description>when changed, the image is zoomed in (if <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Zoom" /> value is larger than 1) or out (if <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Zoom" /> is less than 1). Image also can be zoomed by the mouse wheel scrolled with the Shift button pressed. Also you can use <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Navigator" /> property to specify the behavior on the mouse clicks/move, including zoom in/out, or zooming the selected rectangle.</description></item><item><term><see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.ZoomQuality" /> property</term><description>specifies the zooming quality.</description></item><item><term><see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.ZoomMode" /> property</term><description>specifies the zooming mode. It can be manual (when <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Zoom" /> property is specified manually) or automatic. In the automatic mode the zoom factor is calculated automatically (and you cannot change it until switch to the manual mode). Depending on the mode, it can zoom image to fit at the control without scroll bars (<see cref="F:Aurigma.GraphicsMill.WinControls.ZoomMode.BestFit" />), zoom to eliminate the horizontal scroll bar (<see cref="F:Aurigma.GraphicsMill.WinControls.ZoomMode.FitToWidth" />), etc.</description></item></list><para>If you want to add a selection on the image, you should use the <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Rubberband" /> property. You should assign here an instance of the <see cref="T:Aurigma.GraphicsMill.WinControls.RectangleRubberband" /> class.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.ActualSizeHorizontalScale">
            <summary>Gets an image width multiplied at the ratio screen resolution to image resolution.</summary>
            <value>A width multiplied at the ratio screen resolution to image resolution.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.ActualSizeVerticalScale">
            <summary>Gets an image height multiplied at the ratio screen resolution to image resolution.</summary>
            <value>A height multiplied at the ratio screen resolution to image resolution.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.AlphaEnabled">
            <summary>Gets/sets a value that specifies whether to alpha blend the bitmap or just copy (alpha channel is ignored).</summary>
            <value>The value that specifies whether to alpha blend the bitmap or just copy (alpha channel is ignored).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.AutoUpdate">
            <summary>Gets/sets a value that specifies whether control should be automatically updated after each change of the image.</summary>
            <value>The value that specifies whether control should be automatically updated after each change of the image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.BackgroundImage">
            <summary>Gets/sets the background image displayed in the control.</summary>
            <value>An <see cref="T:System.Drawing.Image" /> object.</value>
            <remarks><para>This property makes no sense for the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> class. </para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.Bitmap">
            <summary>Gets/sets a bitmap which is displayed at the control.</summary>
            <value>The bitmap which should be displayed at the control.</value>
            <remarks><para>When you assign another instance of the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> class to this property, it is highly recommended to dispose the copy currently stored in this property. It will make your application much more memory-friendly.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.ColorManagementEngine" draft="yes">
            <summary>Gets/sets color management engine (module) which will be used during image displaying. Graphics Mill for .NET supports the following engines: LittleCMS and Adobe CMM. The property also allows to disable color management and display without color matching.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.Transforms.ColorManagementEngine" /> value specifying color management engine.</value>
            <remarks><para>Color management is enabled if all of these conditions are met:</para><list type="number"><item><description>This property is set to <see cref="F:Aurigma.GraphicsMill.Transforms.ColorManagementEngine.LittleCms" /> or <see cref="F:Aurigma.GraphicsMill.Transforms.ColorManagementEngine.AdobeCmm" />.</description></item><item><description><see cref="T:Aurigma.GraphicsMill.Bitmap" /> class instance displayed in the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> has <see cref="P:Aurigma.GraphicsMill.Bitmap.ColorProfile" /> initialized with correct color profile (e.g. it is embedded color profile loaded from file, or this property was initialized after the image has been loaded).</description></item></list><para>Color management engine is used to perform color matching while displaying the image. Suppose the property is set to <see cref="F:Aurigma.GraphicsMill.Transforms.ColorManagementEngine.LittleCms" /> or <see cref="F:Aurigma.GraphicsMill.Transforms.ColorManagementEngine.AdobeCmm" /> and the <see cref="T:Aurigma.GraphicsMill.Bitmap" /> has <see cref="P:Aurigma.GraphicsMill.Bitmap.ColorProfile" /> property initialized with a profile. Before image is displayed on the control, it is converted to RGB format with monitor profile as destination one. If you need to disable color management during displaying, set this property to <see cref="F:Aurigma.GraphicsMill.Transforms.ColorManagementEngine.None" />.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.ControlGdiGraphics">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.ControlToWorkspace(System.Drawing.Point,Aurigma.GraphicsMill.Unit)" draft="yes">
            <summary>Converts point coordinates from control-related to workspace-related ones.</summary>
            <param name="controlPoint">The point containing values measured in the coordinates of the control.</param>
            <param name="workspaceUnit">The physical unit of measure.</param>
            <returns>The point containing the values of the <paramref name="controlPoint" /> argument translated into the coordinates of the workspace.</returns>
            <remarks><para>To apply a translation from the workspace coordinates to control coordinates, use the <see cref="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceToControl(System.Drawing.PointF,Aurigma.GraphicsMill.Unit)" /> method.</para></remarks>
            <overloads><summary>Converts coordinates from control-related to workspace-related ones.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.Font">
            <summary>Gets/sets the font of the text displayed by the control.</summary>
            <value>A <see cref="T:System.Drawing.Color" /> value.</value>
            <remarks><para>This property makes no sense for the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> class. </para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.ForeColor">
            <summary>Gets/sets the foreground color of the control.</summary>
            <value>A <see cref="T:System.Drawing.Color" /> value.</value>
            <remarks><para>This property makes no sense for the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> class. </para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.GetCanvasBounds">
            <summary>Returns a rectangle of the bitmap viewer client area (without scroll bars).</summary>
            <returns>A rectangle representing the bitmap viewer client area.</returns>
            <remarks><para>Left-top corner coordinates are measured relatively to the parent form using its coordinate system. Width and height do not include scroll bars and a border.</para><para>To get a rectangle occupied by the bitmap inside the control, use the <see cref="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.GetViewportBounds" /> method.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.GetControlPixelsPerUnitX(Aurigma.GraphicsMill.Unit)">
            <summary>Returns the horizontal resolution, in pixels per the specified unit.</summary>
            <param name="workspaceUnit">The physical unit of measure.</param>
            <returns>The horizontal resolution.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.GetControlPixelsPerUnitY(Aurigma.GraphicsMill.Unit)">
            <summary>Returns the vertical resolution, in pixels per the specified unit.</summary>
            <param name="workspaceUnit">The physical unit of measure.</param>
            <returns>The vertical resolution.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.GetViewportBounds">
            <summary>Returns a rectangle where the image is displayed.</summary>
            <returns>A rectangle where the image is displayed.</returns>
            <remarks><para>Left-top corner coordinates are measured relatively to the return value of the <see cref="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.GetCanvasBounds" /> method. Width and height do not include a bitmap border (see <see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceBorderWidth" />, <see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceBorderEnabled" />, and <see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceBorderColor" /> properties for more details).</para><para>If the image is larger than the control client area, left and top coordinates are equal to <b>0</b>, and width and height of this rectangle are the same as the width and the height of the <see cref="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.GetCanvasBounds" /> return value.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.HasContent">
            <summary>Gets a value indicating if the viewer contains a bitmap.</summary>
            <value>A value indicating if the viewer contains a bitmap.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.HorizontalLargeChange">
            <summary>Gets/sets the large step of the horizontal scroll bar.</summary>
            <value>The number that specifies the large step of the horizontal scroll bar.</value>
            <remarks>Scroll slider will be moved by this value when scroll bar shaft will be clicked.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.HorizontalSmallChange">
            <summary>Gets/sets the small step of the horizontal scroll bar.</summary>
            <value>The number that specifies the small step of the horizontal scroll bar.</value>
            <remarks>Scroll slider will be moved by this value when scroll bar button (with arrow) will be clicked.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.InvalidateViewer" draft="yes">
            <summary>Invalidates the control and causes it to be repainted.</summary>
            <remarks><para>It is recommended to use this method instead of <see cref="M:System.Windows.Forms.Control.Invalidate">System.Windows.Forms.Control.Invalidate</see>.</para></remarks>
            <overloads><summary>Invalidates the specified part of the control and causes it to be repainted.</summary><remarks><para>It is recommended to use this method instead of <see cref="M:System.Windows.Forms.Control.Invalidate">System.Windows.Forms.Control.Invalidate</see>.</para></remarks></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.InvalidateViewer(Aurigma.GraphicsMill.WinControls.InvalidationTarget)" draft="yes">
            <summary>Invalidates the specified target of the control and causes it to be repainted.</summary>
            <param name="target">A descendant of the <see cref="T:Aurigma.GraphicsMill.WinControls.InvalidationTarget" /> class that needs to be repainted.</param>
            <remarks><para>It is recommended to use this method instead of <see cref="M:System.Windows.Forms.Control.Invalidate">System.Windows.Forms.Control.Invalidate</see>.</para><para>
This method allows repainting of a specific object belonging to the control.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.InvalidateViewer(System.Drawing.Rectangle)" draft="yes">
            <summary>Invalidates the specified region of the control and causes it to be repainted.</summary>
            <param name="rectangle">A rectangle that represents the region to invalidate.</param>
            <remarks><para>It is recommended to use this method instead of <see cref="M:System.Windows.Forms.Control.Invalidate">System.Windows.Forms.Control.Invalidate</see>.</para><para>This method allows repainting of a specific region belonging to the control.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.#ctor">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> class instance.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.OnBitmapChanged(System.Object,Aurigma.GraphicsMill.BitmapChangedEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.OnSizeChanged(System.EventArgs)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.RightToLeft">
            <summary>Gets/sets a value indicating whether control's elements are aligned to support locales using right-to-left fonts.</summary>
            <value><see cref="T:System.Windows.Forms.RightToLeft" /> value.</value>
            <remarks><para>This property makes no sense for the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> class. </para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.ScaleToActualSize">
            <summary>Get/sets value that specifies whether to take into account the image resolution (DPI) during displaying.</summary>
            <value>The value that specifies whether to take into account the image resolution (DPI) during displaying.</value>
            <remarks><para>It is useful when image resolution differs from monitor resolution and you need to see actual physical size. Also it handles images with different vertical and horizontal resolutions properly.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.Scroll(System.Boolean,Aurigma.GraphicsMill.WinControls.ScrollValue)" draft="yes">
            <summary>Moves one of the scroll bars to the specified position.</summary>
            <param name="scrollVertically">A value indicating which scroll bar should be moved. If <b>true</b>, the vertical scroll bar will change its position; otherwise, the horizontal scroll bar will move.</param>
            <param name="scrollValue">A <see cref="T:Aurigma.GraphicsMill.WinControls.ScrollValue" /> enumeration member defining a position to which the scroll bar should be moved.</param>
            <overloads><summary>Moves the scroll bar to a specified position.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.Scroll(System.Int32,System.Int32)">
            <summary>Moves the scroll bar by specified values.</summary>
            <param name="horizontalDelta">The distance to move the horizontal scroll bar.</param>
            <param name="verticalDelta">The distance to move the vertical scroll bar.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.ScrollBarsStyle">
            <summary>Gets/sets a value that specify whether to display scroll bar and whether to hide them automatically when the displayed image is less than the control size.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.WinControls.ScrollBarsStyle" /> enumeration member that specifies when to display the scroll bars.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.ScrollHorizontal(System.Int32)">
            <summary>Moves the horizontal scroll bar by the specified value.</summary>
            <param name="scrollDelta">The distance to move the horizontal scroll bar.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.ScrollingPosition">
            <summary>Gets/sets a position of the scroll bars.</summary>
            <value>The point that stores the position of the scroll bars.</value>
            <remarks><para>If you want to change the scroll position, you can also use <see cref="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.Scroll(System.Int32,System.Int32)" />, <see cref="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.ScrollHorizontal(System.Int32)" />, or <see cref="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.ScrollVertical(System.Int32)" /> methods.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.ScrollingSize">
            <summary>Gets a scroll bar length (in other words, the size of the image fragment which is out of the visible area).</summary>
            <value>A scroll bar length.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.ScrollVertical(System.Int32)">
            <summary>Moves the vertical scroll bar by the specified value.</summary>
            <param name="scrollDelta">The distance to move the vertical scroll bar.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.Text">
            <summary>Gets/sets the text associated with this control.</summary>
            <value>Always empty string.</value>
            <remarks><para>This property makes no sense for the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> class. </para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.Unit">
            <summary>Gets/sets a physical unit of measure for the viewer.</summary>
            <value>A physical unit of measure.</value>
            <remarks><para><see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceWidth" /> and <see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceHeight" /> are measured in this units. During the conversion between this units and pixels, the screen resolution is used (usually, it is 96 DPI).</para></remarks>
            <seealso cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceWidth" />
<seealso cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceHeight" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.UpdateCanvas">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.UpdateControlAlongWithBitmap">
            <summary>Repaints the bitmap on the control.</summary>
            <remarks><para>Call this method to reflect changes of the <see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.Bitmap" /> in the viewer if it cannot be refreshed automatically for some reason.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.UpdateZoom(System.Single)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.VerticalLargeChange">
            <summary>Gets/sets the large step of the vertical scroll bar.</summary>
            <value>The number that specifies the large step of the vertical scroll bar.</value>
            <remarks>Scroll slider will be moved by this value when scroll bar shaft will be clicked.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.VerticalSmallChange">
            <summary>Gets/sets the small step of the vertical scroll bar.</summary>
            <value>The number that specifies the small step of the vertical scroll bar.</value>
            <remarks>Scroll slider will be moved by this value when scroll bar button (with arrow) will be clicked.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.ViewportAlignment">
            <summary>Gets/sets a value that specifies bitmap alignment in the control.</summary>
            <value>A value that specifies bitmap alignment in the control.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.WndProc(System.Windows.Forms.Message@)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceBackColor1">
            <summary>Gets/sets the primary color of the bitmap background (the first color for the checkered background or a solid color background).</summary>
            <value>The primary color of the bitmap background (the first color for the checkered background or a solid color background).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceBackColor2">
            <summary>Gets/sets the secondary color of the bitmap background (the second color for the checkered background).</summary>
            <value>The secondary color of the bitmap background (the second color for the checkered background).</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceBackgroundStyle">
            <summary>Gets/sets a background style of the image.</summary>
            <value>A background style of the image.</value>
            <remarks><para>Makes sense only when <see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.AlphaEnabled" /> is <b>true</b> (otherwise background is invisible).</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceBorderColor">
            <summary>Gets/sets a color of the bitmap border.</summary>
            <value>A color of the bitmap border.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceBorderEnabled">
            <summary>Gets/sets a value that specifies whether to display the bitmap border.</summary>
            <value>A value that specifies whether to display the bitmap border.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceBorderWidth">
            <summary>Gets/sets the width of the bitmap border.</summary>
            <value>The width of the bitmap border.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceHeight">
            <summary>Gets/sets the height of the workspace.</summary>
            <value>The height of the workspace.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceToControl(System.Drawing.PointF,Aurigma.GraphicsMill.Unit)">
            <summary>Converts point coordinates from workspace-related to control-related ones.</summary>
            <param name="workspacePoint">The point containing values measured in the coordinates of the workspace.</param>
            <param name="workspaceUnit">The physical unit of measure.</param>
            <returns>The point containing the values of the <paramref name="workspacePoint" /> argument translated into the coordinates of the control.</returns>
            <remarks><para>To apply a translation from the control coordinates to workspace coordinates, use the <see cref="M:Aurigma.GraphicsMill.WinControls.BitmapViewer.ControlToWorkspace(System.Drawing.Point,Aurigma.GraphicsMill.Unit)" /> method.</para></remarks>
            <overloads><summary>Converts coordinates from workspace-related to control-related ones.</summary></overloads>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceWidth">
            <summary>Gets/sets the width of the workspace.</summary>
            <value>The width of the workspace.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.ZoomQuality">
            <summary>Gets/sets the value that specifies a zoom quality.</summary>
            <value>The value that specifies a zoom quality.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ColumnChangedEventArgs">
            <summary>Provides arguments for the <see cref="E:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ColumnChanged" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ColumnChangedEventArgs.ChangeType">
            <summary>Gets a changed property of the column.</summary>
            <value>A column property which is changed.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ColumnChangedEventArgs.#ctor(Aurigma.GraphicsMill.WinControls.ListColumn,Aurigma.GraphicsMill.WinControls.ColumnChangeType)">
            <summary>Creates and initializes a new <see cref="T:Aurigma.GraphicsMill.WinControls.ColumnChangedEventArgs" /> using the specified settings.</summary>
            <param name="column">Column that is changed.</param>
            <param name="changeType">Column property that is changed.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ColumnChangedEventHandler">
            <summary>This delegate represents a method that will handle the <see cref="E:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ColumnChanged" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ColumnChangeType">
            <summary>Contains column properties that can be changed.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ColumnChangeType.Caption">
            <summary>The caption of a column.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ColumnChangeType.TextAlignment">
            <summary>Text alignment in a column.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ColumnChangeType.TextInfoId">
            <summary>Text infolded in a column.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ColumnChangeType.Width">
            <summary>Column width.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ColumnClickEventArgs">
            <summary>Provides arguments for the <see cref="E:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ColumnClick" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ColumnClickEventArgs.Column">
            <summary>Gets the column that has been clicked.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> instance which represents the clicked column.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ColumnClickEventArgs.Index">
            <summary>Gets an index of the column that has been clicked.</summary>
            <value>Zero-based integer value which indicates an index of the column that has been clicked.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ColumnClickEventArgs.#ctor(System.Int32,Aurigma.GraphicsMill.WinControls.ListColumn)">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ColumnClickEventArgs" /> class instance.</summary>
            <param name="columnIndex">Index of the column that has been clicked.</param>
            <param name="column">The <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> instance representing column that has been clicked.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ColumnClickEventHandler">
            <summary>This delegate represents the method that will handle the <see cref="E:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ColumnClick" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ColumnEventArgs">
            <summary>Base class for arguments of events related to a single column.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ColumnEventArgs.Column">
            <summary>Gets the column that causes the event.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> object that causes the event.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ColumnEventArgs.#ctor(Aurigma.GraphicsMill.WinControls.ListColumn)">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ColumnEventArgs" /> class instance.</summary>
            <param name="column">The <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> that causes an event.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ColumnInsertingEventArgs">
            <summary>Provides arguments for the <see cref="E:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ColumnInserting" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumnCollection" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ColumnInsertingEventArgs.Index">
            <summary>Gets an index of the column which is about to be inserted.</summary>
            <value>New column index.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ColumnInsertingEventArgs.#ctor(Aurigma.GraphicsMill.WinControls.ListColumn,System.Int32)">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ColumnInsertingEventArgs" /> class instance.</summary>
            <param name="column">The <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> object to insert.</param>
            <param name="index">New column index.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ColumnInsertingEventHandler">
            <summary>This delegate represents the method that will handle the <see cref="E:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ColumnInserting" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumnCollection" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ColumnRemovingEventArgs">
            <summary>Provides arguments for the <see cref="E:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ColumnRemoving" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumnCollection" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ColumnRemovingEventArgs.Cancel">
            <summary>Gets/sets the value indicating whether to cancel the column removal.</summary>
            <value>A <see cref="T:System.Boolean" /> value indicating whether to cancel the column removal.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ColumnRemovingEventArgs.#ctor(Aurigma.GraphicsMill.WinControls.ListColumn)">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ColumnRemovingEventArgs" /> class instance.</summary>
            <param name="column">The <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> instance that should be removed.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ColumnRemovingEventHandler">
            <summary>This delegate represents the method that will handle the <see cref="E:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ColumnRemoving" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumnCollection" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ColumnsEventArgs">
            <summary>Base class for arguments of events related to multiple columns.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ColumnsEventArgs.Columns">
            <summary>Gets an array of columns that cause the event.</summary>
            <value>An array of <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> objects that cause the event.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ColumnsEventArgs.#ctor(Aurigma.GraphicsMill.WinControls.ListColumn[])">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ColumnsInsertedEventArgs">
            <summary>Provides arguments for the <see cref="E:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ColumnsInserted" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumnCollection" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ColumnsInsertedEventArgs.Index">
            <summary>Gets an index of the first inserted column.</summary>
            <value>An index of the first inserted column.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ColumnsInsertedEventArgs.#ctor(Aurigma.GraphicsMill.WinControls.ListColumn[],System.Int32)">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ColumnsInsertedEventArgs" /> class instance.</summary>
            <param name="columns">An array of <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> instances that have been added into collection.</param>
            <param name="index">An index of the first inserted column.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ColumnsInsertedEventHandler">
            <summary>This delegate represents the method that will handle the <see cref="E:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ColumnsInserted" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumnCollection" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ColumnsRemovedEventArgs">
            <summary>Provides arguments for the <see cref="E:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ColumnsRemoved" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumnCollection" /> class.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ColumnsRemovedEventArgs.#ctor(Aurigma.GraphicsMill.WinControls.ListColumn[],System.Int32[])">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ColumnsRemovedEventArgs" /> class instance.</summary>
            <param name="columns">An array of <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> instances that have been removed from the collection.</param>
            <param name="removedColumnsIndices">An array of indices of removed items.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ColumnsRemovedEventArgs.RemovedColumnsIndices">
            <summary>Gets an array of indices of the removed items.</summary>
            <value>An array of indices of removed items.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ColumnsRemovedEventHandler">
            <summary>This delegate represents the method that will handle the <see cref="E:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ColumnsRemoved" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumnCollection" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.EllipseRubberband">
            <summary>This class represents an ellipse rubberband.</summary>
            <remarks>This rubberband control is inherited from the <see cref="T:Aurigma.GraphicsMill.WinControls.RectangleRubberband" /> and works absolutely in the same way with the single exception: it draws an ellipse inside the rectangle.</remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.EllipseRubberband.#ctor">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.EllipseRubberband" /> class instance.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.IconChangedEventArgs">
            <summary>Provides arguments for the <see cref="E:Aurigma.GraphicsMill.WinControls.IListItem.IconChanged" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> interface and the <see cref="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.IconChanged" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListItemCollection" /> class.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IconChangedEventArgs.#ctor(Aurigma.GraphicsMill.WinControls.IListItem,Aurigma.GraphicsMill.WinControls.View)">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.IconChangedEventArgs" /> class instance.</summary>
            <param name="item">A list item (i.e. an object which implements the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> interface) whose icon has been changed.</param>
            <param name="view"><see cref="T:Aurigma.GraphicsMill.WinControls.View" /> value that specify a view for which the icon has been changed.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.IconChangedEventArgs.View">
            <summary>Gets a view for which the icon has been changed.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.WinControls.View" /> value that specify a view for which the icon has been changed.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.IconChangedEventHandler">
            <summary>This delegate represents the method that will handle the <see cref="E:Aurigma.GraphicsMill.WinControls.IListItem.IconChanged" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> interface and the <see cref="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.IconChanged" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListItemCollection" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ICoordinateMapper">
            <summary>This interface is implemented by all viewers that support coordinate conversion.</summary>
            <remarks><para>Viewers that implement this interface allow converting coordinates between their system and the workspace system.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ICoordinateMapper.ControlToWorkspace(System.Drawing.Point,Aurigma.GraphicsMill.Unit)" draft="yes">
            <summary>Converts point coordinates from control-related to workspace-related ones.</summary>
            <param name="controlPoint">The point containing values measured in the coordinates of the control.</param>
            <param name="workspaceUnit">The physical unit of measure.</param>
            <returns>The point containing the values of the <paramref name="controlPoint" /> argument translated into the coordinates of the workspace.</returns>
            <remarks><para>To apply a translation from the workspace coordinates to control coordinates, use the <see cref="M:Aurigma.GraphicsMill.WinControls.ICoordinateMapper.WorkspaceToControl(System.Drawing.PointF,Aurigma.GraphicsMill.Unit)" /> method.</para></remarks>
            <overloads><summary>Converts coordinates from control-related to workspace-related ones.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ICoordinateMapper.ControlToWorkspace(System.Drawing.Rectangle,Aurigma.GraphicsMill.Unit)" draft="yes">
            <summary>Converts rectangle coordinates and dimensions from control-related to workspace-related ones.</summary>
            <param name="controlRectangle">A rectangle containing values measured in the coordinates of the control.</param>
            <param name="workspaceUnit">The physical unit of measure.</param>
            <returns>A rectangle containing the values of the <paramref name="controlRectangle" /> argument translated into the coordinates of the workspace.</returns>
            <remarks><para>To apply a translation from the workspace coordinates to control coordinates, use the <see cref="M:Aurigma.GraphicsMill.WinControls.ICoordinateMapper.WorkspaceToControl(System.Drawing.RectangleF,Aurigma.GraphicsMill.Unit)" /> method.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ICoordinateMapper.GetControlPixelsPerUnitX(Aurigma.GraphicsMill.Unit)">
            <summary>Returns the horizontal resolution, in pixels per the specified unit.</summary>
            <param name="unit">The physical unit of measure.</param>
            <returns>The horizontal resolution.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ICoordinateMapper.GetControlPixelsPerUnitY(Aurigma.GraphicsMill.Unit)">
            <summary>Returns the vertical resolution, in pixels per the specified unit.</summary>
            <param name="unit">The physical unit of measure.</param>
            <returns>The vertical resolution.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ICoordinateMapper.WorkspaceToControl(System.Drawing.PointF,Aurigma.GraphicsMill.Unit)" draft="yes">
            <summary>Converts point coordinates from workspace-related to control-related ones.</summary>
            <param name="workspacePoint">The point containing values measured in the coordinates of the workspace.</param>
            <param name="workspaceUnit">The physical unit of measure.</param>
            <returns>The point containing the values of the <paramref name="workspacePoint" /> argument translated into the coordinates of the control.</returns>
            <remarks><para>To apply a translation from the control coordinates to workspace coordinates, use the <see cref="M:Aurigma.GraphicsMill.WinControls.ICoordinateMapper.ControlToWorkspace(System.Drawing.Point,Aurigma.GraphicsMill.Unit)" /> method.</para></remarks>
            <overloads><summary>Converts coordinates from workspace-related to control-related ones.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ICoordinateMapper.WorkspaceToControl(System.Drawing.RectangleF,Aurigma.GraphicsMill.Unit)" draft="yes">
            <summary>Converts rectangle coordinates and dimensions from workspace-related to control-related ones.</summary>
            <param name="workspaceRectangle">A rectangle containing values measured in the coordinates of the workspace.</param>
            <param name="workspaceUnit">The physical unit of measure.</param>
            <returns>A rectangle containing the values of the <paramref name="bitmapRectangle" /> argument translated into the coordinates of the control.</returns>
            <remarks><para>To apply a translation from the control coordinates to workspace coordinates, use the <see cref="M:Aurigma.GraphicsMill.WinControls.ICoordinateMapper.ControlToWorkspace(System.Drawing.Rectangle,Aurigma.GraphicsMill.Unit)" /> method.</para></remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.IImageList">
            <summary>This interface is implemented by all objects that can be used as an image storage for the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control.</summary>
            <remarks><para><see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> uses 3 types of images: small icons, large icons and thumbnails. Images of each type are stored in the appropriate image list. There is no need to use these implementations directly, that's why they are hidden.</para><para>You need not implement this interface yourself. You should use it only when you create your own kinds of items, that is when you implement the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> interface). You can get access to the image list through the parent of the list item.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IImageList.AddImage(Aurigma.GraphicsMill.Bitmap,System.Object)" draft="yes">
            <summary>Adds the specified bitmap to the image list.</summary>
            <param name="image">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> class instance representing the image that should be added to the current image list.</param>
            <param name="key">A key corresponding to the <paramref name="image" />.</param>
            <overloads><summary>Adds the specified bitmap to the image list.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IImageList.AddImage(System.Drawing.Icon,System.Object)" draft="yes">
            <summary>Adds the specified icon to the image list.</summary>
            <param name="icon">An <see cref="T:System.Drawing.Icon" /> object representing the icon that should be added to the current image list.</param>
            <param name="key">A key corresponding to the <paramref name="icon" />.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IImageList.AddImage(System.IntPtr,System.Object)" draft="yes">
            <summary>Adds the specified icon to the image list.</summary>
            <param name="icon">A handle to the icon that should be added to the current image list.</param>
            <param name="key">A key corresponding to the <paramref name="icon" />.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IImageList.Clear">
            <summary>Deletes all items from the image list.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IImageList.ContainsKey(System.Object)">
            <summary>Determines whether the list contains a specific key.</summary>
            <param name="key">The key to locate in the list.</param>
            <returns><b>true</b> if the list contains an image with the specified key; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IImageList.GetImage(System.Object)">
            <summary>Gets an image associated with the specified key.</summary>
            <param name="key">The key for which the image should be retrieved.</param>
            <returns>The image associated with the specified key. If the specified key is not found, attempting to get it returns a null reference.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.IImageList.Handle">
            <summary>Gets a Windows API handle to the image list (HIMAGELIST).</summary>
            <value>Handle to the image list. The default value is a null reference.</value>
            <remarks><para>This corresponds to a Win32 HIMAGELIST handle. The handle is not created until you need to use it. Getting the handle causes it to be created.</para></remarks>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.IImageList.ImageRemoved">
            <summary>Raised when an image is removed from the list.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IImageList.IndexOfKey(System.Object)" draft="yes">
            <summary>Returns a zero-based index of the specified key in the list.</summary>
            <param name="key">The key to locate in the list.</param>
            <returns>A zero-based index of key, if key is found in the list; otherwise, -1.</returns>
            <overloads><summary>Returns a zero-based index of the specified key in the list.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IImageList.IndexOfKey(System.Object,System.Boolean)">
            <summary>Returns a zero-based index of the specified key in the list.</summary>
            <param name="key">The key to locate in the list.</param>
            <param name="useDefaultImageIndex">A value specifying whether to use the default image, if no index exists for the <paramref name="key" />. If <b>false</b>, -1 will be returned, even if the default image exists.</param>
            <returns>A zero-based index of key, if key is found in the list; otherwise, -1 or the index of the default image.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IImageList.RemoveByKey(System.Object)">
            <summary>Removes an image with the specified key from the list.</summary>
            <param name="key">The key of the image to remove.</param>
            <remarks><para>If the list does not contain an image with the specified key, the list remains unchanged. No exception is thrown.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IImageList.SetDefaultImage(Aurigma.GraphicsMill.Bitmap)" draft="yes">
            <summary>Inserts a new default image into the image list.</summary>
            <param name="image">The <see cref="T:Aurigma.GraphicsMill.Bitmap" /> class instance representing the image that should be inserted into <see cref="T:Aurigma.GraphicsMill.WinControls.IImageList" /> and marked as default.</param>
            <remarks><para>This image will replace a previously added default image.</para></remarks>
            <overloads><summary>Inserts a default image or icon into the image list.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IImageList.SetDefaultImage(System.Drawing.Icon)">
            <summary>Inserts a new default icon into the image list.</summary>
            <param name="icon">The <see cref="T:System.Drawing.Icon" /> class instance representing the icon that should be inserted into <see cref="T:Aurigma.GraphicsMill.WinControls.IImageList" /> and marked as default.</param>
            <remarks><para>This icon will replace a previously added default icon.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IImageList.SetDefaultImage(System.IntPtr)">
            <summary>Inserts a new default icon into the image list.</summary>
            <param name="icon">Handle to the icon that should be inserted into <see cref="T:Aurigma.GraphicsMill.WinControls.IImageList" /> and marked as default.</param>
            <remarks><para>This icon will replace a previously added default icon.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IImageList.SetImage(Aurigma.GraphicsMill.Bitmap,System.Object)">
            <summary>Sets the specified bitmap for the specified key.</summary>
            <param name="image">A <see cref="T:Aurigma.GraphicsMill.Bitmap" /> class instance representing the image that should be set for the provided <paramref name="key" />.</param>
            <param name="key">A key corresponding to the <paramref name="image" />.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.IListItem">
            <summary>This interface should be implemented by any list item object.</summary>
            <remarks><para>
In the current implementation of the <b>Aurigma.GraphicsMill.WinControls</b> the only one class implements this inteface - <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem" />. It represents file system objects as list items. 
</para><note type="caution"> 
Internal architecture of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control does not allow to share list items. One list item can be displayed only in one <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control. If you need to put the item from one <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control to another one, you should clone it. The <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Parent" /> property enables you to verify whether the item already belongs to some control and get access to this control. Incorrect implementation of this property may lead to unpredictable results.
</note></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.IListItem.Checked">
            <summary>Gets/sets value indicating whether item is checked.</summary>
            <value>A <see cref="T:System.Boolean" /> value indicating whether item is checked.</value>
            <remarks><para>To enable/disable check box of the item, use the <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.CheckEnabled" /> property.</para></remarks>
            <seealso cref="P:Aurigma.GraphicsMill.WinControls.IListItem.CheckEnabled" />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.IListItem.CheckEnabled">
            <summary>Gets/sets the value which shows/hides the check box.</summary>
            <value>A <see cref="T:System.Boolean" /> value indicating whether the check box for the item is visible.</value>
            <remarks><para>If you make check boxes visible, you can verify whether the item is checked using the <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Checked" /> property. </para></remarks>
            <seealso cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Checked" />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.IListItem.Focused">
            <summary>Gets/sets value indicating whether the item has focus.</summary>
            <value>A <see cref="T:System.Boolean" /> value indicating whether the item has focus.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IListItem.GetIconKey(Aurigma.GraphicsMill.WinControls.View)">
            <summary>Returns a key of the item icon for the specified <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.View" /> of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control.</summary>
            <param name="view"><see cref="T:Aurigma.GraphicsMill.WinControls.View" /> enumeration member identifying the view mode to extract an icon index for.</param>
            <returns>An key of the item icon in one of the control image lists. The image list depends on the specified <paramref name="view" /> parameter. If the item has no icon for specified <paramref name="view" />, <b>null</b> is returned.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IListItem.GetText(System.Int32)">
            <summary>Returns the item text information of the specified type.</summary>
            <param name="textInfoId">An integer value specifying the ID of the requested text information type.</param>
            <returns>A string containing requested text information of the item. If an item has no text of the specified type, empty string is returned.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IListItem.HasIcon(Aurigma.GraphicsMill.WinControls.View)">
            <summary>Returns value indicating whether the item has an icon for specified view mode of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" />.</summary>
            <param name="view"><see cref="T:Aurigma.GraphicsMill.WinControls.View" /> enumeration member which specifies a view mode to check out an icon for.</param>
            <returns><b>true</b> if item contains icon for the specified <i>view</i>, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IListItem.HasText(System.Int32)">
            <summary>Returns value indicating whether the item has text information of specified type.</summary>
            <param name="textInfoId">An integer value specifying the ID of the requested text information type.</param>
            <returns><b>true</b> if the item contains a text for specified <i>textInfoID</i>, otherwise <b>false</b>.</returns>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.IListItem.IconChanged">
            <summary>Fires when the item icon or thumbnail has been changed.</summary>
            <remarks><para>This event is raised when the item thumbnail or icon has been changed. If you implement your own list item, do not forget to raise it to update the control properly (especially if you use <see cref="F:Aurigma.GraphicsMill.WinControls.View.Thumbnails" /> mode).</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.IListItem.Parent">
            <summary>Gets/sets a parent <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control of this item.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> which is an owner of this item. If <b>null</b>, the item has no parent yet.</value>
            <remarks><para>Internal architecture of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control requires all list item objects to belong not more than to to one control. Incorrect implementation of this property may lead to unpredictable results. You should not return <b>null</b> if the owner control is actually assigned. </para><para>Also, if it is necessary to dublicate the item into another <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control, you should clone list item rather than use a reference to it.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.IListItem.Selected">
            <summary>Gets/sets a value indicating whether the item is selected.</summary>
            <value>A <see cref="T:System.Boolean" /> value indicating whether the item is selected.</value>
            <remarks><para>Item is selected when the user highlights it by the mouse. Typically it is marked as a blue frame around the item (the exact color depends on the Windows theme though). Do not confuse it with checkbox state (which is available through the <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Checked" /> property).</para></remarks>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.IListItem.StateChanged">
            <summary>Fires when the item state has been changed.</summary>
            <remarks><para>Item state is defined by several properties: <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Checked" />, <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Focused" />, and <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Selected" />. This event is raised whenever some of these properties have been modified. </para><para>When you implement your own list item, use this event to be able to update the control properly when the item state is changed programmatically.</para></remarks>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.IListItem.StateChanging">
            <summary>Fires when the item state is about to be changed.</summary>
            <remarks><para>Item state is defined by several properties: <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Checked" />, <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Focused" />, and <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Selected" />. This event is raised whenever some of these properties are about to be modified. </para><para>Main intent of this property is a possibility to disallow changing an item state.
For example, if you do not want to allow the user to check some items (e.g. if they are too large), you should handle this event and set the <see cref="P:Aurigma.GraphicsMill.WinControls.StateChangingEventArgs.Cancel" /> argument to <b>true</b> for those items. </para><para>When you implement your own list item, use this event to be able to cancel the state change.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.IListItem.Tag">
            <summary>Gets/sets a custom data.</summary>
            <value>An object which contains the custom data which the implementer desire to expose to the programmer. For example, standard implementation of this interface (<see cref="T:Aurigma.GraphicsMill.WinControls.ListItem" /> class) returns a <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> associated with the item.</value>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.IListItem.TextChanged">
            <summary>Fires when them item text has been changed.</summary>
            <remarks><para>This event is raised when any of item textual data has been changed. If you implement your own list item, do not forget to raise it to update the control properly (especially if you use <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" /> mode).</para></remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ImageFitMode">
            <summary>Contains values specifying how to handle situations when the image is not fit at its placeholder at the page.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ImageFitMode.CropToFit">
            <summary>Crops the image. The crop area is centered.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ImageFitMode.ResizeToFill">
            <summary>Resizes the image so that it fills the whole placeholder, even if the resulting image is larger than the placeholder. The aspect ratio is preserved.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ImageFitMode.ResizeToFit">
            <summary>Resizes the image to have the same size as a placeholder for this image at the page (preserving the aspect ratio though). The image is resized even if it is smaller than the placeholder.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ImageFitMode.ShrinkToFit">
            <summary>Resizes the image to have the same size as a placeholder for this image at the page (preserving the aspect ratio though) only if the image is larger than the placeholder. If the image is smaller, it is not changed.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ImagePrintDocument">
            <summary>This class represents an object which sends images to a printer.</summary>
            <remarks><para>You can print an image (or multiple images) with this class in two ways: </para><list type="number"><item><description>Pass the necessary image or collection of images into the <see cref="P:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.Source" /> property. After it you should just run <see cref="M:System.Drawing.Printing.PrintDocument.Print" /> method to start printing. </description></item><item><description>Run the <see cref="M:System.Drawing.Printing.PrintDocument.Print" /> and handle the <see cref="E:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.QueryImage" /> event. Here you can feed the printer with images. To stop requesting images, you should set <see cref="P:Aurigma.GraphicsMill.WinControls.QueryImageEventArgs.HasMoreImages" /> argument of this event to <b>false</b>.</description></item></list><para>To specify how the images should be placed at the page, you should use <see cref="P:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.PlacementMode" /> property. You can specify whether you want to print each image at the individual page, print several images at one page, or place images manually (and in particular specify yourself when to switch to the next page).</para><para>To specify the printing settings, use the <see cref="P:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.PrintOptions" /> property.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.BeforePrintPage">
            <summary>Fires before the control starts printing images at the page.</summary>
            <remarks>Here you can add extra graphics before the images are drawn, e.g. background, text captions at margins, etc.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.DoPrint(System.Drawing.Printing.PrintPageEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.#ctor">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ImagePrintDocument" /> class instance.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.OnEndPrint(System.Drawing.Printing.PrintEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.OnQueryImage(Aurigma.GraphicsMill.WinControls.QueryImageEventArgs)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.PlacementMode">
            <summary>Gets/sets the mode of image placement during printing.</summary>
            <value>The mode of image placement during printing.</value>
            <remarks><para>If you set <see cref="F:Aurigma.GraphicsMill.WinControls.PlacementMode.Manual" /> mode, you should handle <see cref="E:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.QueryImage" /> event and provide your own image position. Otherwise all images will be printed at the same position and at the same page (therefore each next image will overlay the previous one).</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.PrintOptions">
            <summary>Gets/sets the object which specifies print settings.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.WinControls.PrintOptions" /> class instance which contains the print settings.</value>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.QueryImage">
            <summary>Fires when the image is requested to be printed.</summary>
            <remarks><para>At this event you can specify the image for printing, set the placeholder up, etc. Also here you should specify whether to stop the printing or continue requesting further images. </para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.Source">
            <summary>Gets/sets the source where the document obtains the data to print.</summary>
            <value><para>This property supports the following sources:</para><list type="bullet"><item><description>The single <see cref="T:Aurigma.GraphicsMill.Bitmap">Aurigma.GraphicsMill.Bitmap</see> class.</description></item><item><description>The single <see cref="T:Aurigma.GraphicsMill.WinControls.PrintPlaceholder" /> class.</description></item><item><description>Any class which supports <see cref="T:System.Collections.IEnumerator" /> interface and returns either <see cref="T:Aurigma.GraphicsMill.Bitmap">Aurigma.GraphicsMill.Bitmap</see> or <see cref="T:Aurigma.GraphicsMill.WinControls.PrintPlaceholder" /> class instances.</description></item></list></value>
            <remarks><para>More flexible but less convenient way to specify an image or a list of images for printing is to handle <see cref="E:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.QueryImage" /> event. </para></remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ImageRemovedEventArgs">
            <summary>Provides arguments for the <see cref="E:Aurigma.GraphicsMill.WinControls.IImageList.ImageRemoved" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.IImageList" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ImageRemovedEventArgs.ImageIndex">
            <summary>Gets an index of the removed image.</summary>
            <value>An index of the removed image.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ImageRemovedEventArgs.ImageKey">
            <summary>Gets a key of the removed image.</summary>
            <value>A key of the removed image.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ImageRemovedEventArgs.#ctor(System.Object,System.Int32)">
            <summary>Creates and initializes a new <see cref="T:Aurigma.GraphicsMill.WinControls.ImageRemovedEventArgs" /> object.</summary>
            <param name="imageKey">A key of the removed image.</param>
            <param name="imageIndex">An index of the removed image.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ImageRemovedEventHandler">
            <summary>This delegate represents the method that will handle the <see cref="E:Aurigma.GraphicsMill.WinControls.IImageList.ImageRemoved" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.IImageList" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.INavigator">
            <summary>This interface is implemented by all the navigator controls which can be attached to the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> through the <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Navigator" /> property.</summary>
            <remarks><para>This interface has no own members. It inherits all the members from the base <see cref="T:Aurigma.GraphicsMill.WinControls.IUserInputController" /> interface. In fact it is used only to mark up the control which can be used as a navigator.</para></remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.InvalidationTarget">
            <summary>This is an abstract class representing a generic invalidation target.</summary>
            <remarks><para>An invalidation target is an object belonging to the control. The descendants of this class specify what exactly should be invalidated and repainted.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.InvalidationTarget.#ctor(System.Drawing.Rectangle)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.InvalidationTarget.Rectangle">
            <summary>Gets/sets a region to invalidate.</summary>
            <value>A rectangle that represents the region to invalidate.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.IQueueItem">
            <summary>This interface represents list items which can be loaded to the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control asynchronously.</summary>
            <remarks><para>If you implement your own thumbnail list items, you can implement this interface to be able to load them to the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control asynchronously. It is important if you are going to load a big number of your items in the control at the same time. In synchronous mode the application will freeze until all items will be loaded. Obviously it is inconvenient to the end user. </para><para>This interface is based on concepts of <i>methods</i>. The method is a code which evaluates a piece of item data. Each method is identified by the zero-based index. When the control starts loading items, it creates several threads, as many as many methods items have. After that it organizes all items into queues (one queue for each thread). It launches evaluation of the appropriate method for first item in the queue for each threads. When it completes, it takes the next item in the queue, etc. </para><para>For example, if you implement an item which displays goods from the warehouse database, and you extract its name, description, photo, and price, you can have 4 methods: one for each piece of data. The method 0 will evaluate name, the method 1 - description, the method 2 - photo, and the method 3 - price. </para><para>Implementation of this interface is quite straightforward. First of all, you should implement the <see cref="P:Aurigma.GraphicsMill.WinControls.IQueueItem.MethodCount" /> method. It should return a number of methods this item supports. In our example it will be 4.</para><para>The <see cref="M:Aurigma.GraphicsMill.WinControls.IQueueItem.EvaluateMethod(System.Int32)" /> should get the necessary piece of data (according to the specified method index). In our example, you should use the similar <c>switch</c> statement: </para><code>
// ...
switch(methodIndex)
{
  case 0:
    // ... Fetch item name
    break;
  case 1:
    // ... Fetch item description
    break;
  case 2:
    // ... Fetch item photo
    break;
  case 3:
    // ... Fetch item price
    break;
}
// ...
</code><para>For each method you should return value which indicates whether the method has been started or completed. This way the control will be able to determine whether to proceed with the next item. Use the <see cref="M:Aurigma.GraphicsMill.WinControls.IQueueItem.GetMethodState(System.Int32)" /> method for it. </para><para>You may wonder how to affect the queue when you implement the list item. For example, if the control request an icon or thumbnail of the item, it makes sense to pop the item to the head of the queue. To do it, use the <see cref="M:Aurigma.GraphicsMill.WinControls.QueueManager.MoveToHead(Aurigma.GraphicsMill.WinControls.IQueueItem,System.Int32)" /> method of the <see cref="T:Aurigma.GraphicsMill.WinControls.QueueManager" /> stored in the parent of the item.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IQueueItem.EvaluateMethod(System.Int32)">
            <summary>Evaluates a method with the specified index.</summary>
            <param name="methodIndex">An integer value that specifies an index of the method.</param>
            <remarks><para>You need not call this method explicitly. If you implement this interface yourself, it is recommended to read the <see cref="T:Aurigma.GraphicsMill.WinControls.IQueueItem">overview of IQueueItem</see>. </para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IQueueItem.GetMethodState(System.Int32)">
            <summary>Gets the state of the specified method.</summary>
            <param name="methodIndex">An integer value that specifies an index of the method.</param>
            <returns><see cref="T:Aurigma.GraphicsMill.WinControls.QueueItemMethodState" /> value that specifies whether the method was started, finished, or never launched.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.IQueueItem.MethodCount">
            <summary>Gets a number of methods which the <see cref="M:Aurigma.GraphicsMill.WinControls.IQueueItem.EvaluateMethod(System.Int32)" /> can execute.</summary>
            <value>A number of methods supported by the item. In fact it specifies the upper bound for the <i>methodIndex</i> argument of the <see cref="M:Aurigma.GraphicsMill.WinControls.IQueueItem.EvaluateMethod(System.Int32)" /> method.</value>
            <remarks><para>The control can maintain items which hold different number of methods properly.</para></remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.IRubberband">
            <summary>This interface is implemented by all the rubberband controls which can be attached to the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> through the <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Rubberband" /> property.</summary>
            <remarks><para>This interface has no own members. It inherits all the members from the base <see cref="T:Aurigma.GraphicsMill.WinControls.IUserInputController" /> interface. In fact it is used only to mark up the control which can be used as a rubberband.</para></remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ItemActionRequestEventArgs">
            <summary>Provides arguments for the events that are related to an <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> object and represent some action that can be canceled.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ItemActionRequestEventArgs.Cancel">
            <summary>Gets/sets value determining whether the action of the event should be cancelled.</summary>
            <value>If set to <b>true</b>, the action will be cancelled.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ItemActionRequestEventArgs.#ctor(Aurigma.GraphicsMill.WinControls.IListItem)">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ItemActionRequestEventArgs" /> class instance.</summary>
            <param name="item">The <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> object that raised the event.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ItemDragEventArgs">
            <summary>Provides arguments for the <see cref="E:Aurigma.GraphicsMill.WinControls.VirtualListView.ItemDrag" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ItemDragEventArgs.MouseButton">
            <summary>Gets the mouse button that was clicked during the drag operation.</summary>
            <value><see cref="T:System.Windows.Forms.MouseButtons" /> value that specifies the mouse button that was clicked during the drag operation.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ItemDragEventArgs.#ctor(System.Windows.Forms.MouseButtons,Aurigma.GraphicsMill.WinControls.IListItem)">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ItemDragEventArgs" /> class instance.</summary>
            <param name="mouseButton"><see cref="T:System.Windows.Forms.MouseButtons" /> value that specifies the mouse button that was clicked during the drag operation.</param>
            <param name="item">The list object item which is being dragged.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ItemDragEventHandler">
            <summary>This delegate represents the method that will handle the <see cref="E:Aurigma.GraphicsMill.WinControls.VirtualListView.ItemDrag" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ItemEventArgs">
            <summary>Base class for all classes that provides arguments for events related to a single item.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ItemEventArgs.Item">
            <summary>Gets the list item object that is related to the event.</summary>
            <value>The list item object object that is related to the event.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ItemEventArgs.#ctor(Aurigma.GraphicsMill.WinControls.IListItem)">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ItemEventArgs" /> class instance.</summary>
            <param name="item">The list item object that is related to the event.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ItemInsertingEventArgs">
            <summary>Provides arguments for the <see cref="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.ItemInserting" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListItemCollection" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ItemInsertingEventArgs.Index">
            <summary>Gets an index of the item which it will get after inserting.</summary>
            <value>An integer value that specify the destination index of the item.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ItemInsertingEventArgs.#ctor(Aurigma.GraphicsMill.WinControls.IListItem,System.Int32)">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ColumnsRemovedEventArgs" /> class instance.</summary>
            <param name="item">The list item object which is about to be inserted.</param>
            <param name="index">An integer value that specify the destination index of the item.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ItemInsertingEventHandler">
            <summary>This delegate represents the method that will handle the <see cref="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.ItemInserting" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListItemCollection" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ItemRemovingEventHandler">
            <summary>This delegate represents the method that will handle the <see cref="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.ItemRemoving" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListItemCollection" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ItemsEventArgs">
            <summary>Base class for all classes that provides data for events related to a multiple items.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ItemsEventArgs.Items">
            <summary>Gets an array of items affected by the event.</summary>
            <value>An array of list item objects affected by the event.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ItemsEventArgs.#ctor(Aurigma.GraphicsMill.WinControls.IListItem[])">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ItemsInsertedEventArgs">
            <summary>Provides arguments for the <see cref="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.ItemsInserted" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListItemCollection" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ItemsInsertedEventArgs.Index">
            <summary>Gets an index of the first inserted item.</summary>
            <value>An integer value that specify an index of the first inserted item.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ItemsInsertedEventArgs.#ctor(System.Int32,Aurigma.GraphicsMill.WinControls.IListItem[])">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ItemsInsertedEventArgs" /> class instance.</summary>
            <param name="index">An index of the first inserted item.</param>
            <param name="items">An array of the list item objects that have been inserted.</param>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ItemsInsertedEventHandler">
            <summary>This delegate represents the method that will handle the <see cref="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.ItemsInserted" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListItemCollection" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ItemsRemovedEventArgs">
            <summary>Provides arguments for the <see cref="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.ItemsRemoved" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListItemCollection" /> class.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ItemsRemovedEventArgs.#ctor(Aurigma.GraphicsMill.WinControls.IListItem[],System.Int32[])">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ItemsRemovedEventArgs" /> class instance.</summary>
            <param name="items">An array of the list item objects that have been removed from the collection.</param>
            <param name="indices">An array of removed items indices.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ItemsRemovedEventArgs.RemovedItemsIndices">
            <summary>Gets an array of removed items indices.</summary>
            <value>An array of removed items indices.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ItemsRemovedEventHandler">
            <summary>This delegate represents the method that will handle the <see cref="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.ItemsRemoved" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListItemCollection" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.IUserInputController">
            <summary>This interface is implemented by all controls that can manage user input (such as mouse events) of the <see cref="T:Aurigma.GraphicsMill.WinControls.ViewerBase" /> control.</summary>
            <remarks><para>Examples of the controls which should implement this interface are the rubberbands and the navigators. You can inherit from the <see cref="T:Aurigma.GraphicsMill.WinControls.UserInputController" /> class which contains the partial implementation for this interface.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IUserInputController.Connect(Aurigma.GraphicsMill.WinControls.ViewerBase)">
            <summary>Connects this user input controller (navigator or rubberband) to the viewer control.</summary>
            <param name="viewer">A viewer to connect to.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IUserInputController.Disconnect">
            <summary>Disconnects this user input controller (navigator or rubberband) from the <see cref="T:Aurigma.GraphicsMill.WinControls.ViewerBase" /> control.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.IUserInputController.Update">
            <summary>This method is called by the <see cref="T:Aurigma.GraphicsMill.WinControls.ViewerBase" /> when it needs to be repainted or updated in any other way.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.LabelEditedEventArgs">
            <summary>Provides arguments for the <see cref="E:Aurigma.GraphicsMill.WinControls.VirtualListView.LabelEdited" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> class.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.LabelEditedEventArgs.#ctor(Aurigma.GraphicsMill.WinControls.IListItem,System.String)">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.LabelEditedEventArgs" /> class instance.</summary>
            <param name="item">The item whose label has been edited.</param>
            <param name="newText">New label text value.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.LabelEditedEventArgs.NewText">
            <summary>Gets a text value of the new label after editing.</summary>
            <value>A string containing the new text value of the item label after editing.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.LabelEditedEventHandler">
            <summary>This delegate represents the method that will handle the <see cref="E:Aurigma.GraphicsMill.WinControls.VirtualListView.LabelEdited" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.LabelEditingEventHandler">
            <summary>This delegate represents the method that will handle the <see cref="E:Aurigma.GraphicsMill.WinControls.VirtualListView.LabelEditing" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ListColumn">
            <summary>This class represents a column of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control.</summary>
            <remarks><para>Columns are displayed only when <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control is switched into details view mode (i.e. its <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.View" /> property is set to <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" /> value). Before using the detailed view, you should configure columns properly so that the control could be aware what details about the item to display.</para><para>To do it, the following should be done:</para><list type="number"><item><description>Get the collection of columns of the control using the <see cref="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.Columns" /> property. It is empty by default.</description></item><item><description>Create an instance of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> class.</description></item><item><description>Initialize its properties, in particular <see cref="P:Aurigma.GraphicsMill.WinControls.ListColumn.Width" />, <see cref="P:Aurigma.GraphicsMill.WinControls.ListColumn.Caption" />, and <see cref="P:Aurigma.GraphicsMill.WinControls.ListColumn.TextInfoId" /> which identifies a piece of data which should be displayed. If you use standard implementation of items (i.e. <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem" /> class), you can use a number of constants - <see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdCreationDate" />, <see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdDisplayName" />, <see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdFileSize" />, <see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdFileType" />, and <see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdPath" />. </description></item><item><description>Add this column instance into the collection using the <see cref="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.Add(Aurigma.GraphicsMill.WinControls.ListColumn)" /> method of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumnCollection" />.</description></item><item><description>Repeat these steps for other columns.</description></item></list></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ListColumn.Caption">
            <summary>Gets/sets the caption of the column.</summary>
            <value>A string which specifies the caption of the column.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumn.Clone">
            <summary>Returns full copy of this <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> instance.</summary>
            <returns>A full copy of this <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> instance.</returns>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListColumn.ColumnChanged">
            <summary>Raised when column properties are changed.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumn.#ctor" draft="yes">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> class instance.</summary>
            <overloads><summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> class instance.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumn.#ctor(System.Int32,System.String,System.Int32,System.Windows.Forms.HorizontalAlignment)" draft="yes">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> class instance.</summary>
            <param name="textInfoId">An integer value identifying the text information which should be displayed in this column.</param>
            <param name="caption">A string specifying the caption of the column.</param>
            <param name="width">An integer number specifying the column width.</param>
            <param name="textAlignment"><see cref="T:System.Windows.Forms.HorizontalAlignment" /> value that specifies the column text alignment.</param>
            <remarks><para><see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem" /> class provides access to the following pieces of text information: </para><list type="table"><listheader><term> Constant </term><description> Description </description></listheader><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdCreationDate" /></term><description>File creation date.
</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdDisplayName" /></term><description>Display name of the item (its file name without path with or without extention depending on Windows settings).
</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdFileSize" /></term><description>File size.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdFileType" /></term><description>File type name (as registered in Windows).</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdPath" /></term><description>Full path to the file.</description></item></list><para>If you implement your own list items, you should define identifiers of pieces of text information yourself.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumn.OnColumnChanged(Aurigma.GraphicsMill.WinControls.ColumnChangeType)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ListColumn.Parent">
            <summary>Gets the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control which owns this column.</summary>
            <value>The parent <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ListColumn.TextAlignment">
            <summary>Gets/sets the column text alignment.</summary>
            <value><see cref="T:System.Windows.Forms.HorizontalAlignment" /> value specifying the column text alignment.</value>
            <remarks><note>The alignment of the first column should be <see cref="F:System.Windows.Forms.HorizontalAlignment.Left" />.</note></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ListColumn.TextInfoId">
            <summary>Gets/sets the identifier of text information which should be displayed in this column.</summary>
            <value>An integer value identifying the text information which should be displayed in this column.</value>
            <remarks><para><see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem" /> class provides access to the following pieces of text information: </para><list type="table"><listheader><term> Constant </term><description> Description </description></listheader><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdCreationDate" /></term><description>File creation date.
</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdDisplayName" /></term><description>Display name of the item (its file name without path with or without extention depending on Windows settings).
</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdFileSize" /></term><description>File size.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdFileType" /></term><description>File type name (as registered in Windows).</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdPath" /></term><description>Full path to the file.</description></item></list><para>If you implement your own list items, you should define identifiers of pieces of text information yourself.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ListColumn.Width">
            <summary>Gets/sets the column width.</summary>
            <value>A integer value which specifies the column width (in pixels).</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ListColumnCollection">
            <summary>This class represents a storage for <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> objects of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control.</summary>
            <remarks><para>When you display items in the <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" /> view mode, each item is displayed as a row in a table. Each column display a piece of information about the item. For example, if you display a file list, you can use three columns: name, type, and size. </para><para>If you are going to use the <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" /> view, you should should create required number of <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> class instances and add them with the <see cref="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.Add(Aurigma.GraphicsMill.WinControls.ListColumn)" /> method. Later you can remove them with the <see cref="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.Remove(Aurigma.GraphicsMill.WinControls.ListColumn)" /> method, or insert the column to certain position (see the <see cref="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.Insert(System.Int32,Aurigma.GraphicsMill.WinControls.ListColumn)" /> method). If you need to re-initialize columns, you can remove all of them with the <see cref="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.Clear" /> method and add them once again. </para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.Add(Aurigma.GraphicsMill.WinControls.ListColumn[])" draft="yes">
            <summary>Adds multiple columns to the collection.</summary>
            <param name="columns">An array of <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> class instances to add.</param>
            <returns>An index of the first added column.</returns>
            <overloads><summary>Adds a column/columns to the collection.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.Add(Aurigma.GraphicsMill.WinControls.ListColumn)" draft="yes">
            <summary>Adds a single column to the collection.</summary>
            <param name="column">A <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> class instance to add.</param>
            <returns>An index of the new item in the collection.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.Clear">
            <summary>Removes all columns from the collection.</summary>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ColumnChanged">
            <summary>Raised when column properties are changed.</summary>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ColumnClick">
            <summary>Fires when the user clicks a column header of the control in <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" /> view mode.</summary>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ColumnInserting">
            <summary>Fires when new column is about to be inserted into the collection.</summary>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ColumnRemoving">
            <summary>Fires when column is about to be removed from the collection.</summary>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ColumnsInserted">
            <summary>Fires when columns have been inserted into the collection.</summary>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ColumnsRemoved">
            <summary>Fires when columns have been removed from the collection.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.Contains(Aurigma.GraphicsMill.WinControls.ListColumn)">
            <summary>Determines whether the specified <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> is available in this collection.</summary>
            <param name="column">The <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> object to locate in the collection.</param>
            <returns><b>true</b> if the column has been found in the collection; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.CopyTo(Aurigma.GraphicsMill.WinControls.ListColumn[],System.Int32)">
            <summary>Copies list columns into array of <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> objects.</summary>
            <param name="array">Target <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> objects array.</param>
            <param name="index">A zero-based index to start copying from.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.IndexOf(Aurigma.GraphicsMill.WinControls.ListColumn)">
            <summary>Returns an index of the specified <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> class instance stored in this collection.</summary>
            <param name="value">The <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> object to locate in the collection.</param>
            <returns>An integer value that specifies a zero-based index of the first occurrence of specified <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> object in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.Insert(System.Int32,Aurigma.GraphicsMill.WinControls.ListColumn[])" draft="yes">
            <summary>Inserts an array of <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> objects into the collection at the specified index.</summary>
            <param name="index">A zero-based index at which values should be inserted.</param>
            <param name="columns">An array of <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> objects to insert.</param>
            <overloads><summary>Inserts column/columns to the collection at the specified index.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.Insert(System.Int32,Aurigma.GraphicsMill.WinControls.ListColumn)" draft="yes">
            <summary>Inserts a single <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> object into the collection at the specified index.</summary>
            <param name="index">A zero-based index at which values should be inserted.</param>
            <param name="column">A <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> object to insert.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ListColumnCollection.Item(System.Int32)">
            <summary>Gets a <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> object at specified index.</summary>
            <param name="index">An index of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> object to retrieve.</param>
            <value>An instance of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> class which is stored at specified index.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.OnColumnChanged(Aurigma.GraphicsMill.WinControls.ListColumn,Aurigma.GraphicsMill.WinControls.ColumnChangeType)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.OnColumnClick(System.Int32)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.OnColumnInserting(Aurigma.GraphicsMill.WinControls.ListColumn,System.Int32)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.OnColumnRemoving(Aurigma.GraphicsMill.WinControls.ListColumn)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.OnColumnsInserted(System.Int32,Aurigma.GraphicsMill.WinControls.ListColumn[])">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.OnColumnsRemoved(Aurigma.GraphicsMill.WinControls.ListColumn[],System.Int32[])">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.OnValidate(System.Object)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.Remove(Aurigma.GraphicsMill.WinControls.ListColumn[])" draft="yes">
            <summary>Removes specified columns from the collection.</summary>
            <param name="columns">An array of <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> objects to remove.</param>
            <overloads><summary>Removes a column/columns from the collection.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.Remove(Aurigma.GraphicsMill.WinControls.ListColumn)" draft="yes">
            <summary>Removes a column from the collection.</summary>
            <param name="column">A <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> object to remove.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.RemoveAt(System.Int32)">
            <summary>Removes a column with a specified index from the collection.</summary>
            <param name="index">A zero-based index of the column to remove.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.RemoveSortOrderIcon(System.Int32)">
            <summary>Removes sort icon (triangle) from specified column.</summary>
            <param name="columnIndex">An index of column to remove icon from.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.SetSortOrderIcon(System.Int32,System.Boolean)">
            <summary>Adds sort icon for the specified column.</summary>
            <param name="columnIndex">An index of column to set icon for.</param>
            <param name="ascendingIcon">A <see cref="T:System.Boolean" /> value which specifies whether the icon should be displayed for ascending or descending sort.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnCollection.ToArray">
            <summary>Copies the items of the collection to a new array.</summary>
            <returns>An array of <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> objects containing all columns of the collection.</returns>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ListColumnTypeConverter">
            <summary>Provides type converting functionality for the <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> class (used by Visual Studio).</summary>
            <remarks><para>No need to use this class explicitly. It is required by Visual Studio to be able to work with the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control in design-time properly.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that specifies the type you want to convert to.</param>
            <returns><b>true</b> if this converter can perform the conversion; otherwise, <b>false</b>.</returns>
            <remarks><para>No need to use this class explicitly. It is required by Visual Studio to be able to work with the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control in design-time properly.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that specifies the culture used to represent the object.</param>
            <param name="value">An <see cref="T:System.Object" /> to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> to convert the <i>value</i> parameter to.</param>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
            <remarks><para>No need to use this class explicitly. It is required by Visual Studio to be able to work with the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control in design-time properly.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListColumnTypeConverter.#ctor">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumnTypeConverter" /> class instance.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ListItem" draft="yes">
            <summary>This class represents partial implementation of the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> interface.</summary>
            <remarks><para>You need not use this class directly. You should use the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem" /> class instead.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ListItem.Checked">
            <summary>Gets/sets value indicating whether item is checked.</summary>
            <value>A <see cref="T:System.Boolean" /> value indicating whether item is checked.</value>
            <remarks><para>To enable/disable check box of the item, use the <see cref="P:Aurigma.GraphicsMill.WinControls.ListItem.CheckEnabled" /> property.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ListItem.CheckEnabled">
            <summary>Gets/sets the value which shows/hides the check box.</summary>
            <value>A <see cref="T:System.Boolean" /> value indicating whether the check box for the item is visible.</value>
            <remarks><para>If you make check boxes visible, you can verify whether the item is checked using the <see cref="P:Aurigma.GraphicsMill.WinControls.ListItem.Checked" /> property. </para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ListItem.Focused">
            <summary>Gets/sets value indicating whether the item has focus.</summary>
            <value>A <see cref="T:System.Boolean" /> value indicating whether the item has focus.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItem.GetIconKey(Aurigma.GraphicsMill.WinControls.View)">
            <summary>Returns a key of the item icon for the specified <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.View" /> of the <see cref="T:Aurigma.GraphicsMill.WinControls.VirtualListView" /> control.</summary>
            <param name="view">A <see cref="T:Aurigma.GraphicsMill.WinControls.View" /> enumeration member identifying the view mode to extract an icon key for.</param>
            <returns>A key of the item icon in one of the control image lists. The image list depends on the specified <paramref name="view" /> parameter. If the item has no icon for the specified <paramref name="view" />, <b>null</b> is returned.</returns>
            <remarks><para>Although the return value <b>null</b> means that no icon is available, if you try to get an icon later, you may find out that it returns a correct index of the icon. This fact is explained by an asynchronous nature of item loading. Potentially, you can call this method before the control loads the item, and therefore it cannot return an icon. However, after you try to retrieve this item, its priority is increased (it is moved to the head of the item queue), and you can get the icon as soon as possible.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItem.GetText(System.Int32)">
            <summary>Returns the specified text information of the item.</summary>
            <param name="textInfoId">An integer value identifying the type of requested text information.</param>
            <returns>A string containing requested text information of the item. If the item has no text of specified type, it returns the empty string.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItem.HasIcon(Aurigma.GraphicsMill.WinControls.View)">
            <summary>Returns value indicating whether the item has an icon for specified view mode of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" />.</summary>
            <param name="view"><see cref="T:Aurigma.GraphicsMill.WinControls.View" /> enumeration member which specifies a view mode to check out an icon for.</param>
            <returns><b>true</b> if item contains icon for the specified <i>view</i>, otherwise <b>false</b>.</returns>
            <remarks><para>Although return value = -1 means that no icon available, if you try to get an icon later, you may find out that it returns a correct index of the icon. This fact is explained by asynchronous nature of the item loading. Potentially you can call this method before the control loads the item, and therefore it cannot return an icon. However after you try to get this item, its priority is increased (i.e. it is moved to the head of the items queue) and you can get it as soon as possible. </para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItem.HasText(System.Int32)">
            <summary>Returns value indicating whether the item has text information of specified type.</summary>
            <param name="textInfoId">An integer value specifying the identifier of the requested piece of text information.</param>
            <returns><b>true</b> if the item contains a text for specified <i>textInfoId</i>, otherwise <b>false</b>.</returns>
            <remarks><para><see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem" /> class provides access to the following pieces of text information: </para><list type="table"><listheader><term> Constant </term><description> Description </description></listheader><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdCreationDate" /></term><description>File creation date.
</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdDisplayName" /></term><description>Display name of the item (its file name without path with or without extention depending on Windows settings).
</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdFileSize" /></term><description>File size.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdFileType" /></term><description>File type name (as registered in Windows).</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdPath" /></term><description>Full path to the file.</description></item></list></remarks>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListItem.IconChanged">
            <summary>Fires when the item icon or thumbnail has been changed.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItem.#ctor">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItem.#ctor(Aurigma.GraphicsMill.WinControls.ListItem)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItem.OnIconChanged(Aurigma.GraphicsMill.WinControls.View)" draft="yes">
            <summary>Raises the <see cref="E:Aurigma.GraphicsMill.WinControls.ListItem.IconChanged" /> event.</summary>
            <param name="view">A <see cref="T:Aurigma.GraphicsMill.WinControls.View" /> mode for which the icon has been changed.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItem.OnStateChanged(Aurigma.GraphicsMill.WinControls.StateType)">
            <summary>Raises the <see cref="E:Aurigma.GraphicsMill.WinControls.ListItem.StateChanged" /> event.</summary>
            <param name="stateType">A <see cref="T:Aurigma.GraphicsMill.WinControls.StateType" /> value specifying the state the event is raised for.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItem.OnStateChanging(Aurigma.GraphicsMill.WinControls.StateType)">
            <summary>Raises the <see cref="E:Aurigma.GraphicsMill.WinControls.ListItem.StateChanging" /> event.</summary>
            <param name="stateType">A <see cref="T:Aurigma.GraphicsMill.WinControls.StateType" /> value specifying the state the event is raised for.</param>
            <returns>A value from the <see cref="E:Aurigma.GraphicsMill.WinControls.ListItem.StateChanging" /> event specifying whether to cancel the state change.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItem.OnTextChanged(System.Int32)">
            <summary>Raises the <see cref="E:Aurigma.GraphicsMill.WinControls.ListItem.TextChanged" /> event.</summary>
            <param name="textInfoId">ID of the text information the event is raised for.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ListItem.Parent">
            <summary>Gets/sets a parent <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control of this item.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> which is an owner of this item. If <b>null</b>, the item has no parent yet.</value>
            <remarks><para>Internal architecture of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control requires all list item objects to belong not more than to to one control. If it is necessary to dublicate the item into another <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control, you should clone this list item rather than use a reference to it.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ListItem.Selected">
            <summary>Gets/sets a value indicating whether the item is selected.</summary>
            <value>A <see cref="T:System.Boolean" /> value indicating whether the item is selected.</value>
            <remarks><para>Item is selected when the user highlights it by the mouse. Typically it is marked as a blue frame around the item (the exact color depends on the Windows theme though). Do not confuse it with checkbox state (which is available through the <see cref="P:Aurigma.GraphicsMill.WinControls.ListItem.Checked" /> property).</para></remarks>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListItem.StateChanged">
            <summary>Fires when the item state has been changed.</summary>
            <remarks><para>Item state is defined by several properties: <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Checked" />, <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Focused" />, and <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Selected" />. This event is raised whenever some of these properties have been modified. </para></remarks>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListItem.StateChanging">
            <summary>Fires when the item state is about to be changed.</summary>
            <remarks><para>Item state is defined by several properties: <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Checked" />, <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Focused" />, and <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Selected" />. This event is raised whenever some of these properties are about to be modified. </para><para>Main intent of this property is a possibility to disallow changing an item state.
For example, if you do not want to allow the user to check some items (e.g. if they are too large), you should handle this event and set the <see cref="P:Aurigma.GraphicsMill.WinControls.StateChangingEventArgs.Cancel" /> argument to <b>true</b> for those items. </para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ListItem.Tag">
            <summary>Gets/sets a custom data.</summary>
            <value>An instance of the <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> class associated with the item.</value>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListItem.TextChanged">
            <summary>Fires when them item text has been changed.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ListItem.Texts">
            <summary>Gets a hash table which stores all text information of the item.</summary>
            <value><see cref="T:System.Collections.Hashtable" /> which stores all text information of the item.</value>
            <remarks><para>IDs of text information are used as keys of this hash table.</para></remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ListItemCollection">
            <summary>This class represents storage for list items the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control.</summary>
            <remarks><para>This class is never created directly and available only through the <see cref="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.Items" /> of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control. Use it to work with items displayed in this contol. 
</para><para>
To add new items, use the <see cref="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.Add(Aurigma.GraphicsMill.WinControls.IListItem[])" /> method. Also, you can insert items to specified position using the <see cref="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.Insert(System.Int32,Aurigma.GraphicsMill.WinControls.IListItem[])" /> method. In both cases <see cref="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.ItemInserting" /> and <see cref="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.ItemsInserted" /> events will be raised. </para><para>To remove items, use the <see cref="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.Remove(Aurigma.GraphicsMill.WinControls.IListItem[])" /> or <see cref="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.RemoveAt(System.Int32)" /> method. If it is necessary to remove all methods from the collection. To handle items removal, you can use <see cref="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.ItemRemoving" /> and <see cref="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.ItemsRemoved" /> events.</para><para>To get access to items stored in this collection, use the <see cref="P:Aurigma.GraphicsMill.WinControls.ListItemCollection.Item(System.Int32)" /> property. Also, if you want to get items which meet some criteria (e.g. all selected items), use the <see cref="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.GetItemsByState(Aurigma.GraphicsMill.WinControls.StateType,System.Boolean,System.Boolean)" /> method.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.Add(Aurigma.GraphicsMill.WinControls.IListItem[])" draft="yes">
            <summary>Adds an array of list items into the collection.</summary>
            <param name="items">Array of objects implementing the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> interface to add.</param>
            <returns>An integer number which specify the index of the first added item.</returns>
            <overloads><summary>Adds an array of list items into the collection.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.Add(Aurigma.GraphicsMill.WinControls.IListItem)" draft="yes">
            <summary>Adds a list item into the collection.</summary>
            <param name="value">An object implementing the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> interface to add.</param>
            <returns>An integer number which specify the index of the just-added item.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.Clear">
            <summary>Removes all items from the collection.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.Contains(Aurigma.GraphicsMill.WinControls.IListItem)">
            <summary>Determines whether specified list item object is available in the collection.</summary>
            <param name="value">The object implementing the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> interface to locate in the collection.</param>
            <returns><b>true</b>if the item is found in the collection; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.CopyTo(Aurigma.GraphicsMill.WinControls.IListItem[],System.Int32)">
            <summary>Copies list columns into array of <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> objects.</summary>
            <param name="array">Target array of objects implementing <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> interface.</param>
            <param name="index">A zero-based index to start copying from.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.GetItemsByState(Aurigma.GraphicsMill.WinControls.StateType,System.Boolean,System.Boolean)">
            <summary>Gets an array of list items which have the specified state (e.g. checked, or selected).</summary>
            <param name="itemStateType">Member of the <see cref="T:Aurigma.GraphicsMill.WinControls.StateType" /> enumeration specifying the search criteria.</param>
            <param name="valueToCompare">A <see cref="T:System.Boolean" /> value which should the state property have to be included into the result array.</param>
            <param name="onlyFirst">A <see cref="T:System.Boolean" /> value which specifies whether only the first found item should be returned (<b>true</b> ) or all items which meet <i>itemStateType</i> and <i>valueToCompare</i> arguments requirements (<b>false</b>).</param>
            <returns>Result array of list items that meets specified criterias.</returns>
            <remarks><para>This method checks <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Checked" />, <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Focused" />, or <see cref="P:Aurigma.GraphicsMill.WinControls.IListItem.Selected" /> property (depending on the <i>itemStateType</i> argument value) of all items in the collection, and if it equals to <i>valueToCompare</i> argument, an appropriate item is added into the result array. For example, if you want to get all selected items, you should set <i>itemStateType</i> to <see cref="F:Aurigma.GraphicsMill.WinControls.StateType.Selection" /> and <i>valueToCompare</i> to <b>true</b>. If you want to get, say, all unchecked items, use the following values: <i>itemStateType</i> = <see cref="F:Aurigma.GraphicsMill.WinControls.StateType.Check" /> and <i>valueToCompare</i> = <b>false</b>. </para></remarks>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.IconChanged">
            <summary>Fires when the icon of some list item stored in the collection has been changed.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.IndexOf(Aurigma.GraphicsMill.WinControls.IListItem)">
            <summary>Returns an index of the specified item in the collection.</summary>
            <param name="value">The list item object to locate in the collection.</param>
            <returns>A zero-based index of specified item object in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.Insert(System.Int32,Aurigma.GraphicsMill.WinControls.IListItem[])" draft="yes">
            <summary>Inserts an array of items into the collection at the specified index.</summary>
            <param name="index">A zero-based index at which items should be inserted.</param>
            <param name="items">An array of list item objects to insert.</param>
            <overloads><summary>Inserts items into the collection at the specified index.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.Insert(System.Int32,Aurigma.GraphicsMill.WinControls.IListItem)">
            <summary>Inserts a list item into the collection at the specified index.</summary>
            <param name="index">A zero-based index at which item should be inserted.</param>
            <param name="value">An list item object to insert.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ListItemCollection.Item(System.Int32)">
            <summary>Gets/sets a list item by specified index.</summary>
            <param name="index">A zero-based index of the list item to retrieve.</param>
            <value>The list item stored by the specified index.</value>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.ItemInserting">
            <summary>Fires when new item is about to be inserted into the collection.</summary>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.ItemRemoving">
            <summary>Fires when an item is about to be removed from the collection.</summary>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.ItemsInserted">
            <summary>Fires when new items have been inserted into the collection.</summary>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.ItemsRemoved">
            <summary>Fires when some items have been removed from the collection.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.Remove(Aurigma.GraphicsMill.WinControls.IListItem[])" draft="yes">
            <summary>Removes specified items from the collection.</summary>
            <param name="values">An array of list items to remove.</param>
            <overloads><summary>Removes items from the collection.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.Remove(Aurigma.GraphicsMill.WinControls.IListItem)">
            <summary>Removes specified item from the collection.</summary>
            <param name="value">The list item object to remove.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.RemoveAt(System.Int32)">
            <summary>Removes a list item of the collection at the specified index.</summary>
            <param name="index">An integer value specifying a zero-based index of the list item to remove.</param>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.StateChanged">
            <summary>Fires when state of some list item of the collection have been changed.</summary>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.StateChanging">
            <summary>Fires when state of some item of the collection is about to be changed.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.Swap(Aurigma.GraphicsMill.WinControls.IListItem[],System.Int32)" draft="yes">
            <summary>Shifts the specified elements to a specific position.</summary>
            <param name="items">An array of elements to shift.</param>
            <param name="destinationIndex">A position to which the <paramref name="items" /> should be shifted.</param>
            <remarks><para>This method swaps the elements so that the <paramref name="items" /> start with the <paramref name="destinationIndex" />.</para></remarks>
            <overloads><summary>Swaps the elements of the list.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.Swap(Aurigma.GraphicsMill.WinControls.IListItem,Aurigma.GraphicsMill.WinControls.IListItem)">
            <summary>Swaps two elements of the list.</summary>
            <param name="item0">The first element to swap.</param>
            <param name="item1">The second element to swap.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.Swap(System.Int32[],System.Int32)" draft="yes">
            <summary>Shifts elements with the specified indices to a specific position.</summary>
            <param name="indexes">An array of element indices to shift.</param>
            <param name="destinationIndex">A position to which the elements should be shifted.</param>
            <remarks><para>This method swaps the elements so that the items with the <paramref name="indexes" /> start with the <paramref name="destinationIndex" />.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.Swap(System.Int32,System.Int32)">
            <summary>Swaps two elements with the specified indices.</summary>
            <param name="index0">The index of the first element to swap.</param>
            <param name="index1">The index of the second element to swap.</param>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.TextChanged">
            <summary>Fires when text information of some item of the collection has been changed.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ListItemCollection.ToArray">
            <summary>Copies all elements of the collection to a new array.</summary>
            <returns>An array of objects which implement the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> interface containing all items of the collection.</returns>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.MaskStyle">
            <summary>Contains possible values for the <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.MaskStyle" /> which specifies when to display the mask around the rectangle represented with the <see cref="T:Aurigma.GraphicsMill.WinControls.RectangleRubberband" /> class.</summary>
            <remarks><para>The mask displaying is working quite slow, that's why if you want to increase the performance when the rectangle is moved or resized by user, it is recommended to use <see cref="F:Aurigma.GraphicsMill.WinControls.MaskStyle.HideOnChange" /> value. </para></remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.MaskStyle.Always">
            <summary>Display the mask always, even when the rectangle is moved or resized.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.MaskStyle.HideOnChange">
            <summary>Display the mask only when the rectangle is not changing. If user moves or resizes the rectangle, the mask is hidden.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.MaskStyle.None">
            <summary>Never display the mask.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.MouseEventArgs">
            <summary>Provides data for the <b>MouseUp</b>, <b>MouseDown</b>, and <b>MouseMove</b> events.</summary>
            <remarks><para>The <b>MouseDown</b> event occurs when the user presses the mouse button while the pointer is over a control. The <b>MouseUp</b> event occurs when the user releases the mouse button while the pointer remains over the control. The <b>MouseMove</b> event occurs when the user moves the mouse pointer over a control.</para><para>This class specifies which mouse button is pressed, how many times the mouse button was pressed and released, and the coordinates of the mouse.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.MouseEventArgs.Button">
            <summary>Gets a value that specifies what mouse button has been pressed.</summary>
            <value>One of the <see cref="T:System.Windows.Forms.MouseButtons" /> values.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.MouseEventArgs.Clicks">
            <summary>Gets the number of times the mouse button was pressed and released.</summary>
            <value>The number of times the mouse button was pressed and released.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.MouseEventArgs.Location">
            <summary>Gets the coordinates of the mouse.</summary>
            <value>The coordinates of the mouse as a point, in pixels.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.MouseEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.Int32,System.Single,System.Single)" draft="yes">
            <summary>Create and initializes a new <see cref="T:Aurigma.GraphicsMill.WinControls.MouseEventArgs" /> object.</summary>
            <param name="button">One of the <see cref="T:System.Windows.Forms.MouseButtons" /> values.</param>
            <param name="clicks">The number of times the mouse button was pressed and released.</param>
            <param name="x">The x-coordinate of the mouse, in pixels.</param>
            <param name="y">The y-coordinate of the mouse, in pixels.</param>
            <overloads><summary>Create and initializes a new <see cref="T:Aurigma.GraphicsMill.WinControls.MouseEventArgs" /> object.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.MouseEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.Int32,System.Drawing.PointF)" draft="yes">
            <summary>Create and initializes a new <see cref="T:Aurigma.GraphicsMill.WinControls.MouseEventArgs" /> object.</summary>
            <param name="button">One of the <see cref="T:System.Windows.Forms.MouseButtons" /> values.</param>
            <param name="clicks">The number of times the mouse button was pressed and released.</param>
            <param name="location">The coordinates of the mouse as a point, in pixels.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.MouseEventArgs.X">
            <summary>Gets the x-coordinate of the mouse.</summary>
            <value>The x-coordinate of the mouse, in pixels.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.MouseEventArgs.Y">
            <summary>Gets the y-coordinate of the mouse.</summary>
            <value>The y-coordinate of the mouse, in pixels.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.MouseEventHandler">
            <summary>This delegate represents the method that will handle the <b>MouseUp</b>, <b>MouseDown</b>, and <b>MouseMove</b> events.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.PanNavigator">
            <summary>This class represents a navigator which is used to pan the image inside the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> control.</summary>
            <remarks><para>When this navigator is attached to the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> using its property <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Navigator" />, it is working in the following way:</para><list type="number"><item><description>When the left button of the mouse is pressed down, it captures the control.</description></item><item><description>When control is captured and the mouse is moved, the image is panned together with mouse pointer.</description></item><item><description>When the left button of the mouse is released, the mouse control is dismissed.</description></item></list></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.PanNavigator.#ctor">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.PanNavigator" /> class instance.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.PanNavigator.OnViewerMouseDown(System.Windows.Forms.MouseEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.PanNavigator.OnViewerMouseMove(System.Windows.Forms.MouseEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.PanNavigator.UpdateCursor(System.Boolean,System.Drawing.Point)">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.Pidl" draft="yes">
            <summary>The class represents a wrapper class for PIDL structures management.</summary>
            <remarks><para>Every object of the file system (like files, folders, drives, etc.) may be identified by the pointer to an item identifier list (or abbreviated - <i>PIDL</i>). Moreover, any object of the Shell namespace may be identified by the PIDL (for example, connected USB storage devices, digital photo cameras, network resources, etc). So, the class provides access to objects of the shell namespace.</para><para>To get a PIDL by the path string, you can use the <see cref="M:Aurigma.GraphicsMill.WinControls.Pidl.Create(System.String)" /> method. Also, this method enables to create PIDL for special object of the file system such as <i>My Document</i> folder and similar ones. Just pass a member of the <see cref="T:Aurigma.GraphicsMill.WinControls.StandardFolder" /> enumeration to this method. </para><para>The most exciting feature of this class is possibility to get children of a file system object. This way you can organize a file system tree which includes not only files and folder, but also removable media, special folder, etc. To do it, you should create a root PIDL based on the <see cref="F:Aurigma.GraphicsMill.WinControls.StandardFolder.Desktop" /> and recursively get its subitems. The PIDL distinguishes two kinds of subitems: files and folders.</para><para><i>Files</i> are objects of the file system which cannot have any subitems. They always has a binary content available through the <see cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Stream" /> property. To check whether the current PIDL is a file, use the <see cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Type" /> property. It should be equal to <see cref="F:Aurigma.GraphicsMill.WinControls.PidlType.File" />. </para><para>Contrariwise, <i>folders</i> are objects which can contain subitems. Not only directories can be interpreted as folders, but also system drives, removable media, etc. Folders do not have binary content and its <see cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Stream" /> property is not valid. To check whether the current PIDL is a file, use the <see cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Type" /> property. It should be equal to <see cref="F:Aurigma.GraphicsMill.WinControls.PidlType.Folder" />. To get all files of the current folder, use the <see cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Files" /> property. If you need to get subfolder only, use the <see cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Folders" /> property. To get both folders and files, use the <see cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Items" /> property. The parent PIDL can be received using the <see cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Parent" /> property. </para><para>If you want to convert the PIDL to a common file system path string, you can just use the <see cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Path" /> property. However keep in mind, that not each PIDL represents physical file or folder. In this case you will get the empty string.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.Pidl.Create(Aurigma.GraphicsMill.WinControls.Pidl)" draft="yes">
            <summary>Creates a duplicate of the specified <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object.</summary>
            <param name="pidl"><see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object which should be duplicated.</param>
            <returns>A full copy of the specified source <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object.</returns>
            <overloads><summary>Creates new instance of the <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> class.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.Pidl.Create(Aurigma.GraphicsMill.WinControls.StandardFolder)" draft="yes">
            <summary>Creates new <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object which represents specified special folder.</summary>
            <param name="standardFolder">A <see cref="T:Aurigma.GraphicsMill.WinControls.StandardFolder" /> value that specifies a special folder such as <i>My Documents</i>, <i>Desktop</i>, etc.</param>
            <returns>New <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object which represents a <i>standardFolder</i>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.Pidl.Create(System.String)" draft="yes">
            <summary>Creates new <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object which represents a file or folder with specified path.</summary>
            <param name="path">A string specifying the path to a file or folder.</param>
            <returns>New <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object which represents the specified file or folder.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.Pidl.Create(System.IntPtr)" draft="yes">
            <summary>Creates new <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object based on the PIDL handle.</summary>
            <param name="pidl">A handle of the PIDL object.</param>
            <returns>New <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object based on the specified handle.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.Pidl.Dispose">
            <summary>Releases unmanaged resources used by the <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.Pidl.Files">
            <summary>Gets an array of files contained in this <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object.</summary>
            <value>An array of files of the <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object.</value>
            <remarks><para>If you need to get all subitems (including both files and folders), use the <see cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Items" /> property instead. If you need to get folders only, use the <see cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Folders" /> property. </para></remarks>
            <seealso cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Folders" />
<seealso cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Items" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.Pidl.Finalize">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.Pidl.Folders">
            <summary>Gets an array of subfolders of the <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object.</summary>
            <value>An array of subfolders of the <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object.</value>
            <remarks><para>If you need to get all subitems (including both files and folders), use the <see cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Items" /> property instead. If you need to get files only, use the <see cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Files" /> property. </para></remarks>
            <seealso cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Files" />
<seealso cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Items" />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.Pidl.Handle">
            <summary>Gets a handle to the shell PIDL object.</summary>
            <value>A handle to the underlying shell PIDL object.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.Pidl.IsRoot">
            <summary>Gets a value indicating whether the <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object represents the <see cref="F:Aurigma.GraphicsMill.WinControls.StandardFolder.Desktop" /> folder (i.e. root of the file system).</summary>
            <value>A <see cref="T:System.Boolean" /> value indicating whether the <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object is a root of the file system.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.Pidl.Items">
            <summary>Gets an array of all subitems of the <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object (includes both files and folders).</summary>
            <value>An array of subitems of the <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object.</value>
            <remarks><para>If you need to get only files (without subfolders), use the <see cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Files" /> property instead (e.g. when creating a file list). If you need to work only with folders, use the <see cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Folders" /> property (e.g. when creating a folder tree view). </para></remarks>
            <seealso cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Files" />
<seealso cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Folders" />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.Pidl.Parent">
            <summary>Gets a PIDL of the parent file system object.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object containing a parent of the current PIDL. If current PIDL is a root item, <b>null</b> is returned.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.Pidl.Path">
            <summary>Gets file system path of the <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object (if available).</summary>
            <value>A string containing the file system path of the <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object. If the file path is not available, empty string is returned.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.Pidl.Stream">
            <summary>Gets a binary content of a file system item represented by this <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object.</summary>
            <value><see cref="T:System.IO.Stream" /> object representing a binary content of the file system item.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.Pidl.Type">
            <summary>Gets a type of the file system item object represented by this <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object.</summary>
            <value>A member of the <see cref="T:Aurigma.GraphicsMill.WinControls.PidlType" /> enumeration which specifies whether this item is a file or folder.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.PidlType">
            <summary>Contains possible values for the <see cref="P:Aurigma.GraphicsMill.WinControls.Pidl.Type" /> property.</summary>
            <remarks><para>Keep in mind that "file" and "folder" terms have wider interpretation when we talk about PIDLs. For example, the <i>My Computer</i> item is not a folder in terms of file system, but it is a folder in terms of PIDL objects. </para></remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.PidlType.File">
            <summary>File or any other file system item which does not have any children and has a binary content.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.PidlType.Folder">
            <summary>Folder or any other file system item which may have children.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.PlacementMode">
            <summary>Contains supported image placement modes at the page.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.PlacementMode.Auto">
            <summary>Multiple placeholders are placed at the page automatically. Unlike <see cref="F:Aurigma.GraphicsMill.WinControls.PlacementMode.MultipleImages" /> mode, a smarter algorithm is used which tries to save as much paper as possible.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.PlacementMode.Manual">
            <summary>The placeholder position is placed manually in the <see cref="E:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.QueryImage" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ImagePrintDocument" /> class.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.PlacementMode.MultipleImages">
            <summary>Multiple placeholders are placed at the page automatically. To print more images at the single page it is recommended to set <see cref="P:Aurigma.GraphicsMill.WinControls.PrintOptions.PlaceholderAutoRotate" /> option to <b>true</b>.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.PlacementMode.SingleImage">
            <summary>Single placeholder (image) is placed at the single page.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.PrintOptions">
            <summary>This class is used to contain global options of the <see cref="T:Aurigma.GraphicsMill.WinControls.ImagePrintDocument" />.</summary>
            <remarks><para>Most print options relate to the appearance of the single placeholder, such as border settings, footer and header text settings, default dimensions, etc. Also here you can specify spacing between placeholders.</para><para>Also you can define the fit mode - the behavior when the image has different size comparing to the placeholder. In this case the image can be cropped or resized. Another important option is auto rotation for the placeholder and the image inside the placeholder. It enables you to save paper during printing.</para><para>You can edit these settings even during printing when you get this class instance through the <see cref="P:Aurigma.GraphicsMill.WinControls.QueryImageEventArgs.PrintOptions" /> argument of the <see cref="E:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.QueryImage" /> event.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.BorderColor">
            <summary>Gets/sets the color of the border around the placeholder.</summary>
            <value>The color of the border around the placeholder.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.BorderEnabled">
            <summary>Gets/sets a value which enables a border around each placeholder.</summary>
            <value><b>true</b> when the border around each placeholder should be printed, <b>false</b> otherwise.</value>
            <remarks><para>The width for this border can be specified with the <see cref="P:Aurigma.GraphicsMill.WinControls.PrintOptions.BorderWidth" /> property. Its color is set to <see cref="P:Aurigma.GraphicsMill.WinControls.PrintOptions.BorderColor" /> property. </para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.BorderWidth">
            <summary>Gets/sets the width of the border around the placeholder.</summary>
            <value>The width of the border around the placeholder.</value>
            <remarks>The border width is measured in 1/100 of inches.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.FooterAlignment">
            <summary>Gets/sets the alignment of the footer text.</summary>
            <value>The alignment of the footer text.</value>
            <remarks>The footer is printed at the bottom of each placeholder.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.FooterColor">
            <summary>Gets/sets the color of the footer text.</summary>
            <value>The color of the footer text.</value>
            <remarks>The footer is printed at the bottom of each placeholder.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.FooterEnabled">
            <summary>Gets/sets the value which enables the footer text for each printed item.</summary>
            <value><b>true</b> when the footer text should be printed for each item, <b>false</b> otherwise.</value>
            <remarks><para>The font of the footer is specified by the <see cref="P:Aurigma.GraphicsMill.WinControls.PrintOptions.FooterFont" />. Its color is specified with the <see cref="P:Aurigma.GraphicsMill.WinControls.PrintOptions.FooterColor" /> property. Also you can specify the trimming mode - the method of truncation of the footer text when it is too large to fit the placeholder width.</para><para>The footer text itself is set by the <see cref="P:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.Footer" /> property of the <see cref="T:Aurigma.GraphicsMill.WinControls.PrintPlaceholder" /> class instance which represents single printed item.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.FooterFont">
            <summary>Gets/sets the font settings of the footer text.</summary>
            <value>The font settings of the footer text.</value>
            <remarks>The footer is printed at the bottom of each placeholder.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.FooterTrimming">
            <summary>Gets/sets the string trimming settings of the footer text when it is do not fit the placeholder.</summary>
            <value>The string trimming settings of the footer text.</value>
            <remarks>The footer is printed at the bottom of each placeholder.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.HeaderAlignment">
            <summary>Gets/sets the alignment of the header text.</summary>
            <value>The alignment of the header text.</value>
            <remarks>The header is printed at the top of each placeholder.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.HeaderColor">
            <summary>Gets/sets the color of the header text.</summary>
            <value>The color of the header text.</value>
            <remarks>The header is printed at the top of each placeholder.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.HeaderEnabled">
            <summary>Gets/sets the value which enables the header text for each printed item.</summary>
            <value><b>true</b> when the header text should be printed for each item, <b>false</b> otherwise.</value>
            <remarks><para>The font of the header is specified by the <see cref="P:Aurigma.GraphicsMill.WinControls.PrintOptions.HeaderFont" />. Its color is specified with the <see cref="P:Aurigma.GraphicsMill.WinControls.PrintOptions.HeaderColor" /> property. Also you can specify the trimming mode - the method of truncation of the header text when it is too large to fit the placeholder width.</para><para>The header text itself is set by the <see cref="P:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.Header" /> property of the <see cref="T:Aurigma.GraphicsMill.WinControls.PrintPlaceholder" /> class instance which represents single printed item.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.HeaderFont">
            <summary>Gets/sets the font settings of the header text.</summary>
            <value>The font settings of the header text.</value>
            <remarks>The header is printed at the top of each placeholder.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.HeaderTrimming">
            <summary>Gets/sets the string trimming settings of the header text when it is do not fit the placeholder.</summary>
            <value>The string trimming settings of the header text.</value>
            <remarks>The header is printed at the bottom of each placeholder.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.HorizontalSpacing">
            <summary>Gets/sets the horizontal spacing between placeholders.</summary>
            <value>The horizontal spacing between placeholders.</value>
            <remarks>Measured in 1/100 of inches.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.ImageAutoRotate">
            <summary>Gets/sets the value which allows the control to analyze the orientation of the image and automatically rotate it if necessary.</summary>
            <value>When it is <b>true</b>, the control automatically rotate the image if its orientation is not the same as an orientation of the placeholder. Otherwise the orientation of the original image is always preserved.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.ImageFitMode">
            <summary>Gets/sets the value which specifies how to handle situations when the image is not fit at its placeholder at the page.</summary>
            <value>The value which specifies how to handle situations when the image is not fit at its placeholder at the page.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.InterpolationMode">
            <summary>Gets/sets the interpolation mode used to scale the images when its size differs from the size of the placeholder.</summary>
            <value>The interpolation mode used to scale the images when its size differs from the size of the placeholder.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.PrintOptions.#ctor">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.PrintOptions" /> class instance.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.PlaceholderAutoRotate">
            <summary>Gets/sets the value which enables to optimize paper usage by rotating the placeholder when it .</summary>
            <value>When it is <b>true</b>, the control automatically rotate the image if its orientation is not the same as an orientation of the placeholder. Otherwise the orientation of the original image is always preserved.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.PlaceholderSize">
            <summary>Gets/sets the default dimensions of the placeholder.</summary>
            <value>The default dimensions of the placeholder</value>
            <remarks>Measured in 1/100 of inches.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintOptions.VerticalSpacing">
            <summary>Gets/sets the vertical spacing between placeholders.</summary>
            <value>The vertical spacing between placeholders.</value>
            <remarks>Measured in 1/100 of inches.</remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.PrintPlaceholder">
            <summary>This class incapsulates the single item printed in the <see cref="T:Aurigma.GraphicsMill.WinControls.ImagePrintDocument" /> class.</summary>
            <remarks><para>The placeholder (printed item) is defined by the following elements:</para><list type="bullet"><item><description>An image which should be printed. It is specified with the <see cref="P:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.Image" /> property.</description></item><item><description>A header text. It is specified with the <see cref="P:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.Header" /> property.</description></item><item><description>A footer text. It is specified with the <see cref="P:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.Footer" /> property.</description></item></list><para>When you place the placeholder manually, you can define its position using <see cref="P:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.Location" /> property. Also, you can set the dimensions of the placeholder using the <see cref="P:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.Size" /> property. If the image has the different size, it will be resized or cropped depending on the <see cref="P:Aurigma.GraphicsMill.WinControls.PrintOptions.ImageFitMode" /> property of the <see cref="T:Aurigma.GraphicsMill.WinControls.PrintOptions" /> used by the <see cref="T:Aurigma.GraphicsMill.WinControls.ImagePrintDocument" /> which prints this item. </para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.Footer">
            <summary>Gets/sets the footer text for the placeholder.</summary>
            <value>The footer text for the placeholder.</value>
            <remarks>The font and other settings of the footer text are specified in the <see cref="T:Aurigma.GraphicsMill.WinControls.PrintOptions" /> object.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.Header">
            <summary>Gets/sets the header text for the placeholder.</summary>
            <value>The header text for the placeholder.</value>
            <remarks>The font and other settings of the header text are specified in the <see cref="T:Aurigma.GraphicsMill.WinControls.PrintOptions" /> object.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.Image">
            <summary>Gets/sets the image which should be printed in this placeholder.</summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.Bitmap">Aurigma.GraphicsMill.Bitmap</see> class instance containing the image which should be printed in this placeholder.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.Location">
            <summary>Gets/sets the location of the top left corner of the placeholder on the page.</summary>
            <value>The location of the top left corner of the placeholder on the page.</value>
            <remarks>Measured in 1/100 of inches.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.#ctor" draft="yes">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.PrintPlaceholder" /> class instance.</summary>
            <overloads><summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.PrintPlaceholder" /> class instance.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.#ctor(Aurigma.GraphicsMill.Bitmap,System.String,System.String,System.Drawing.Point,System.Drawing.Size)" draft="yes">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.PrintPlaceholder" /> class instance and initialize all its members.</summary>
            <param name="image">The <see cref="T:Aurigma.GraphicsMill.Bitmap">Aurigma.GraphicsMill.Bitmap</see> class instance containing the image which should be printed in this placeholder. You can change it later using <see cref="P:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.Image" /> property.</param>
            <param name="header">The header text for the placeholder. You can change it later using <see cref="P:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.Header" /> property.</param>
            <param name="footer">The footer text for the placeholder. You can change it later using <see cref="P:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.Footer" /> property.</param>
            <param name="location">The location of the top left corner of the placeholder on the page. You can change it later using <see cref="P:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.Location" /> property.</param>
            <param name="size">The dimensions of the placeholder. You can change it later using <see cref="P:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.Size" /> property.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.Size">
            <summary>Gets/sets the dimensions of the placeholder.</summary>
            <value>The dimensions of the placeholder.</value>
            <remarks>Measured in 1/100 of inches.</remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.QueryImageEventArgs">
            <summary>Provides arguments for the <see cref="E:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.QueryImage" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ImagePrintDocument" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.QueryImageEventArgs.BeginNewPage">
            <summary>Gets/sets the value which specifies whether to start printing from the new page.</summary>
            <value>If it is <b>true</b>, this image is started with a new page, <b>false</b> otherwise. Note, it makes sense to modify this argument only when <see cref="P:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.PlacementMode" /> is <see cref="F:Aurigma.GraphicsMill.WinControls.PlacementMode.Manual" />. In other placement modes this argument is ignored.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.QueryImageEventArgs.Cancel">
            <summary>Gets/sets a value which specifies whether to abort the printing process.</summary>
            <value>When <b>true</b> the printing process is aborted. Note, it is not guarantied that it interrupts the printing process immediately when the event handler exits. If the printer already have a part of image in the buffer, it may be printed there.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.QueryImageEventArgs.HasMoreImages">
            <summary>Gets/sets a value which specifies whether the image prepared at this event handler is the last one.</summary>
            <value>When <b>true</b> the image specified in the <see cref="P:Aurigma.GraphicsMill.WinControls.QueryImageEventArgs.PrintPlaceholder" /> argument is printing and the printing is stopped. When it is <b>false</b>, this event fires again (until you set this argument to <b>true</b>).</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.QueryImageEventArgs.#ctor">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.QueryImageEventArgs" /> class instance.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.QueryImageEventArgs.PrintOptions">
            <summary>Gets/sets the global print options.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.WinControls.PrintOptions" /> class instance containing the print options for this printing session.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.QueryImageEventArgs.PrintPlaceholder">
            <summary>Gets/sets the item which is currently being printed.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.WinControls.PrintPlaceholder" /> class instance which stores an image to be printed and other placeholder parameters. Note, when <see cref="P:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.PlacementMode" /> is <see cref="F:Aurigma.GraphicsMill.WinControls.PlacementMode.Manual" />, placeholder <see cref="P:Aurigma.GraphicsMill.WinControls.PrintPlaceholder.Location" /> is not initialized.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.QueryImageEventHandler">
            <summary>This delegate represents the method that will handle the <see cref="E:Aurigma.GraphicsMill.WinControls.ImagePrintDocument.QueryImage" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ImagePrintDocument" /> class and its descendants.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.QueueItemMethodState">
            <summary>Contains possible states of methods of asynchronous items (i.e. objects which support <see cref="T:Aurigma.GraphicsMill.WinControls.IQueueItem" /> interface).</summary>
            <seealso cref="T:Aurigma.GraphicsMill.WinControls.IQueueItem" />
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.QueueItemMethodState.Finished">
            <summary>Method has been finished.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.QueueItemMethodState.NotStarted">
            <summary>Method never started.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.QueueItemMethodState.Started">
            <summary>Method has been started but was not finished yet.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.QueueManager">
            <summary>This class is used to optimize asynchronous item loading.</summary>
            <remarks><para>Most of functionality of this class is used internally. However it has two public members which should be used when you implement your own list items and want the control to load them asynchronously.</para><para>The method <see cref="M:Aurigma.GraphicsMill.WinControls.QueueManager.StartQueues" /> should be used every time when it is necessary to update items. Typically you call it in implementation of the <see cref="M:Aurigma.GraphicsMill.WinControls.IListItem.GetIconKey(Aurigma.GraphicsMill.WinControls.View)" /> and <see cref="M:Aurigma.GraphicsMill.WinControls.IListItem.GetText(System.Int32)" /> methods when this data is not available yet. You can freely call this method when queues are already in process. Such calls will be just ignored. This way you need not check whether it is already running or something like this.
</para><para>The second method <see cref="M:Aurigma.GraphicsMill.WinControls.QueueManager.MoveToHead(Aurigma.GraphicsMill.WinControls.IQueueItem,System.Int32)" /> is used to increase the priority of certain item. For example, when the user scrolls control view area, you can increase the priority of visible items by calling this method in the <see cref="M:Aurigma.GraphicsMill.WinControls.IListItem.GetIconKey(Aurigma.GraphicsMill.WinControls.View)" /> method implementation.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.QueueManager.MoveToHead(Aurigma.GraphicsMill.WinControls.IQueueItem,System.Int32)">
            <summary>Pops the specified item to the head of the queue.</summary>
            <param name="item">An item implementing the <see cref="T:Aurigma.GraphicsMill.WinControls.IQueueItem" /> interface which should be moved to the head of the queue.</param>
            <param name="methodIndex">An index of a method which will be called for the queue.</param>
            <remarks><para>Use this method to ensure that the item load its data (i.e. <see cref="M:Aurigma.GraphicsMill.WinControls.IQueueItem.EvaluateMethod(System.Int32)" /> executes) as soon as possible. It is important when you are going to have a lot of items in a control and want to load thumbnails or other item details by demand. For example, when the user loads 500 items, the queue is organized the same order as they are appear on the screen. If the user scrolls the control to, say, 400th item, he/she would not like to wait until all invisible items before 400th one will be loaded. The user expects that priority of visible items will be increased. </para><para>
To provide such behavior it is recommended to call this method when the control requests a thumbnail (i.e. in <see cref="M:Aurigma.GraphicsMill.WinControls.IListItem.GetIconKey(Aurigma.GraphicsMill.WinControls.View)" /> method implementation). This way when the user scrolls the control and items start repainting, the control calls the 
<see cref="M:Aurigma.GraphicsMill.WinControls.IListItem.GetIconKey(Aurigma.GraphicsMill.WinControls.View)" />. If no thumbnail available, you should pop this item to the head of the queue. This way you increase the priority of visible items.</para><para>Keep in mind, the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem" /> class already implements this approach. You need to use <see cref="T:Aurigma.GraphicsMill.WinControls.QueueManager" /> only if you are creating your own list item class (i.e. implement <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> and <see cref="T:Aurigma.GraphicsMill.WinControls.IQueueItem" /> interfaces yourself).</para><para>It is recommended to start queues execution via <see cref="M:Aurigma.GraphicsMill.WinControls.QueueManager.StartQueues" /> method every time you move the item to the head. </para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.QueueManager.StartQueues">
            <summary>Starts execution of all queues of the manager.</summary>
            <remarks><para>When the queue is started, the queue manager takes items from a queue one by one, checks its state <see cref="M:Aurigma.GraphicsMill.WinControls.IQueueItem.GetMethodState(System.Int32)" /> and if it is <see cref="F:Aurigma.GraphicsMill.WinControls.QueueItemMethodState.NotStarted" />, runs the <see cref="M:Aurigma.GraphicsMill.WinControls.IQueueItem.EvaluateMethod(System.Int32)" /> method.</para><para>It is safe to call this method when the queue already started. So it is recommended to call this method each time you move an item to the head of the queue or update an item. </para></remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.RectangleChangeMode">
            <summary>Contains possible values for the <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleEventArgs.ChangeMode" /> property which specifies how the current rectangle of the rubberband is going to be changed.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.RectangleChangeMode.Changed">
            <summary>The rubberband is alredy changed: movement or resizing is over.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.RectangleChangeMode.Moving">
            <summary>The rubberband is being moved.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.RectangleChangeMode.Resizing">
            <summary>The rubberband is being resized.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.RectangleController" draft="yes">
            <summary>This is a base class for all the navigators or rubberbands which should display a rectangle.</summary>
            <remarks><para>Currently this class has two descendants: the navigator <see cref="T:Aurigma.GraphicsMill.WinControls.ZoomRectangleNavigator" /> and the rubberband <see cref="T:Aurigma.GraphicsMill.WinControls.RectangleRubberband" />.</para><para>This class implements the functionality for displaying a rectangle rubberband. You can change the rectangle appearance with <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleController.OutlineColor1" />, <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleController.OutlineColor2" />, <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleController.OutlineWidth" />, and <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleController.OutlineStyle" /> properties.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.RectangleController.#ctor">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.RectangleController.OnViewerDoubleBufferPaint(System.Windows.Forms.PaintEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.RectangleController.OnViewerDoubleClick(System.EventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.RectangleController.OnViewerKeyDown(System.Windows.Forms.KeyEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.RectangleController.OnViewerKeyUp(System.Windows.Forms.KeyEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.RectangleController.OnViewerMouseDown(System.Windows.Forms.MouseEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.RectangleController.OnViewerMouseMove(System.Windows.Forms.MouseEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.RectangleController.OnViewerMouseUp(System.Windows.Forms.MouseEventArgs)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.RectangleController.OutlineColor1">
            <summary>Gets/sets the first color of the rectangle outline when it is dashed.</summary>
            <value>The first color of the rectangle outline when it is dashed.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.RectangleController.OutlineColor2">
            <summary>Gets/sets the second color of the rectangle outline when it is dashed.</summary>
            <value>The second color of the rectangle outline when it is dashed.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.RectangleController.OutlineStyle">
            <summary>Gets/sets the rectangle outline pen style (solid, dashed, etc).</summary>
            <value>The pen style of the rectangle outline.</value>
            <remarks><para>Since rectangle outline is drawn using GDI (through the <see cref="T:Aurigma.GraphicsMill.Drawing.Graphics" /> class), pen style has the same limitations as a GDI pen. In particular, if the pen width (specified with the <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleController.OutlineWidth" /> property) is larger than 1, pen style is always solid, regardless to this property value.   </para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.RectangleController.OutlineWidth">
            <summary>Gets/sets the rectangle outline width.</summary>
            <value>The rectangle outline width.</value>
            <remarks><para>If this property is more than 1, the pen style is always solid regardless to the <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleController.OutlineStyle" /> property value.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.RectangleController.Update">
            <summary>This method is called with a <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> when it needs to be repainted or updated in any other way.</summary>
            <remarks>You can use this method to force rectangle update.</remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.RectangleController.UpdateCursor(System.Boolean,System.Drawing.Point)">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.RectangleEventArgs">
            <summary>Provides arguments for the events of the rectangle rubberband controls (inherited from the <see cref="T:Aurigma.GraphicsMill.WinControls.RectangleRubberband" /> class).</summary>
            <remarks><para>
This class is used by such events as:
</para><list type="bullet"><item><description><see cref="E:Aurigma.GraphicsMill.WinControls.RectangleRubberband.RectangleChanging" /></description></item><item><description><see cref="E:Aurigma.GraphicsMill.WinControls.RectangleRubberband.RectangleChanged" /></description></item></list><para>
This class contains single property <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleEventArgs.Rectangle" /> which contain current size of the rectangle which represents the rubberband.
</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.RectangleEventArgs.ChangeMode">
            <summary>Gets/sets the value that specifies how the rubberband has been changed (resized or removed).</summary>
            <value>A mode that indicates how the current rubberband is going to be changed: resized or removed.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.RectangleEventArgs.#ctor(System.Drawing.Rectangle,Aurigma.GraphicsMill.WinControls.RectangleChangeMode)">
            <summary>Creates and initializes a new <see cref="T:Aurigma.GraphicsMill.WinControls.RectangleEventArgs" /> object.</summary>
            <param name="rectangle">The current rectangle of the rubberband.</param>
            <param name="changeMode">The change mode of the current rubberband.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.RectangleEventArgs.Rectangle">
            <summary>Indicates the current rectangle of the rubberband.</summary>
            <value>The current rectangle of the rubberband.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.RectangleEventHandler">
            <summary>This delegate represents the method that will handle events of the <see cref="T:Aurigma.GraphicsMill.WinControls.RectangleRubberband" /> class and its descendants.</summary>
            <remarks><para>
This delegate is used by such events as:
</para><list type="bullet"><item><description><see cref="E:Aurigma.GraphicsMill.WinControls.RectangleRubberband.RectangleChanging" /></description></item><item><description><see cref="E:Aurigma.GraphicsMill.WinControls.RectangleRubberband.RectangleChanged" /></description></item></list></remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.RectangleRubberband">
            <summary>This class represents the rectangular rubberband.</summary>
            <remarks><para>You can use this class to draw a rectangle on the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> control surface. Depending on this control properties you can resize (see <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.ResizeMode" /> property) or move (see <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.Movable" /> property) this rectangle by the mouse. This way this rubberband is extremely useful to make a rectangular selection on the bitmap. </para><para>To get or set the rectangle (selection) programmatically, you can use property <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.Rectangle" />. It will return the rectangle displayed at the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> control in coordinates of the bitmap associated with it.</para><para>The rectangle can be resized either arbitrary, or only increase or decrease the width and height equally (i.e. preserving the rectangle proportion). It is specified by the <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.ResizeMode" /> property. The required aspect ratio is specified with the <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.Ratio" /> property.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.Erasable">
            <summary>Gets/sets a value that specifies whether the rubberband can be erased (discarded) when user clicks by a mouse out of this rectangle.</summary>
            <value>The value that specifies whether the rubberband is erased (discarded) when user clicks by a mouse out of this rectangle.</value>
            <remarks><para>Default value is <b>true</b>.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.RectangleRubberband.Erase">
            <summary>Erases (discards) the rubberband from the control.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.GripColor">
            <summary>Gets/sets the color of grips.</summary>
            <value>The color of grips.</value>
            <remarks><para>In fact the grips are displayed with the gradient from white to the specified color.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.GripSize">
            <summary>Gets/sets the grip size.</summary>
            <value>The grip size.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.GripsVisible">
            <summary>Gets/sets a value which shows or hides the grips on the rectangle.</summary>
            <value>The value which is <b>true</b> when grips should be displayed; otherwise, <b>false</b>.</value>
            <remarks><para>When grips are shown, user can resize the rectangle by dragging them. When grips are hidden, user can resize the rectangle by dragging any point of the rectangle border.</para><para>Number of the grips depends on the rubberband <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.ResizeMode" />:</para><list type="bullet"><item><description>When the arbitrary resize is enabled (<see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.ResizeMode" /> = <see cref="F:Aurigma.GraphicsMill.WinControls.ResizeMode.Arbitrary" />), eight grips are displayed: four for each rectangle corner, and four for each rectangle edge (in the center at the edge). </description></item><item><description>When the resize with only fixed proportions is enabled (<see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.ResizeMode" /> = <see cref="F:Aurigma.GraphicsMill.WinControls.ResizeMode.Proportional" />), there are four grips for each rectangle corner is available. </description></item><item><description>When the resize is disabled (<see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.ResizeMode" /> = <see cref="F:Aurigma.GraphicsMill.WinControls.ResizeMode.None" />), no grips are displayed regardless to the <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.GripsVisible" /> value.</description></item></list></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.IsEmpty">
            <summary>Gets a value that specifies whether the rubberband rectangle is empty (and therefore whether it is visible).</summary>
            <value>The value that specifies whether the rubberband rectangle is empty.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.MaskColor">
            <summary>Gets/sets the color of the mask.</summary>
            <value>The color of the mask.</value>
            <remarks><para>This property makes sense only when mask is enabled, i.e. the <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.MaskStyle" /> property is not set to <see cref="F:Aurigma.GraphicsMill.WinControls.MaskStyle.None" />. </para><para>To modify the mask opacity, use the <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.MaskOpacity" /> property.
</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.MaskOpacity">
            <summary>Gets/sets the opacity of the mask.</summary>
            <value>The opacity of the mask.</value>
            <remarks><para>This property makes sense only when mask is enabled, i.e. the <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.MaskStyle" /> property is not set to <see cref="F:Aurigma.GraphicsMill.WinControls.MaskStyle.None" />. </para><para>To modify the mask color, use the <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.MaskColor" /> property.
</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.MaskStyle">
            <summary>Gets/sets a value which specified when to enable masking of the area outside of the rectangle.</summary>
            <value>A member of the <see cref="T:Aurigma.GraphicsMill.WinControls.MaskStyle" /> enumeration which specifies when to enable the mask.</value>
            <remarks><para>The mask "shadows" the portion of the image which is out of the rectangle. It is convenient to use this feature when you are using the rubberband to specify the cropping frame. The masked area will represent the part of image which will be discarded after the crop.</para><para>The mask color can be modified with the <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.MaskColor" /> property. The mask opacity is set with the <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.MaskOpacity" /> property.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.Movable">
            <summary>Gets/sets a value which specifies whether the rubberband rectangle can be dragged on the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> control.</summary>
            <value>The value which specifies whether the rubberband rectangle can be dragged on the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> control.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.RectangleRubberband.#ctor">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.RectangleRubberband" /> class instance.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.Ratio">
            <summary>Gets/sets the aspect ratio of the rubberband rectangle which should be preserved when <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.ResizeMode" /> is <see cref="F:Aurigma.GraphicsMill.WinControls.ResizeMode.Proportional" />.</summary>
            <value>The aspect ratio of the rubberband rectangle which should be preserved when <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.ResizeMode" /> is <see cref="F:Aurigma.GraphicsMill.WinControls.ResizeMode.Proportional" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.Rectangle">
            <summary>Gets/sets a rubberband rectangle.</summary>
            <value>A rubberband rectangle.</value>
            <remarks><para>Rectangle values (left, top, width and height) are measured in the coordinates of the bitmap associated with the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> where it is displayed. </para></remarks>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.RectangleRubberband.RectangleChanged">
            <summary>Fires when the rubberband rectangle is modified (mouse button is released).</summary>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.RectangleRubberband.RectangleChanging">
            <summary>Fires during the rubberband rectangle modification (before the mouse button is released).</summary>
            <remarks>The <see cref="T:Aurigma.GraphicsMill.WinControls.RectangleEventArgs" /> data can be used to update the properties of the rectangle being modified.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.ResizeMode">
            <summary>Gets/sets an allowed resize mode for the rubberband rectangle.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.WinControls.ResizeMode" /> enumeration member that specifies an allowed resize mode for the rubberband rectangle.</value>
            <remarks><para>When <see cref="F:Aurigma.GraphicsMill.WinControls.ResizeMode.Proportional" /> resize mode is used, you can specify the required aspect ratio of the rectangle using <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.Ratio" /> property. </para></remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ResizeMode">
            <summary>Contains possible resize modes for the rectangle rubberband (class <see cref="T:Aurigma.GraphicsMill.WinControls.RectangleRubberband" /> and its descendants).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ResizeMode.Arbitrary">
            <summary>User can resize the rectangle without keeping the aspect ratio.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ResizeMode.None">
            <summary>User cannot resize the rectangle. However you can still update <see cref="P:Aurigma.GraphicsMill.WinControls.RectangleRubberband.Rectangle" /> property.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ResizeMode.Proportional">
            <summary>User can resize the rectangle only with fixed aspect ratio.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ScrollBarsStyle">
            <summary>Contains values which specify when to display scroll bars at the control.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ScrollBarsStyle.Always">
            <summary>scroll bars are always displayed regardless to the control content dimensions. If control content is too small, scroll bars are disabled.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ScrollBarsStyle.Auto">
            <summary>scroll bars are displayed when control content is too large to fit the control client area. When content is too small, scroll bars are hidden.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ScrollBarsStyle.None">
            <summary>scroll bars are never displayed regardless to the control content dimensions.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ScrollValue">
            <summary>Contains the most common scroll bar positions.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ScrollValue.Begin">
            <summary>The initial position of the scroll bar.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ScrollValue.End">
            <summary>The final position of the scroll bar.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ScrollValue.PageBack">
            <summary>The position of the previous page.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ScrollValue.PageForward">
            <summary>The position of the next page.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ScrollValue.StepBack">
            <summary>The position of the previous step.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ScrollValue.StepForward">
            <summary>The position of the next step.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.StandardFolder">
            <summary>Contains identifiers of special folders which typically are not available through the file system.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.StandardFolder.Desktop">
            <summary><i>Desktop</i> folder (root of the file system).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.StandardFolder.Favorites">
            <summary><i>Favorites</i> folder.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.StandardFolder.MyComputer">
            <summary><i>My Computer</i> folder.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.StandardFolder.MyDocuments">
            <summary><i>My Documents</i> folder.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.StandardFolder.MyPictures">
            <summary><i>My Pictures</i> folder.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.StandardFolder.NetAndDialupConnections">
            <summary><i>Network Connections</i> folder.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.StandardFolder.NetworkNeighborhood">
            <summary><i>Network Neighborhood</i> folder.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.StandardFolder.Printers">
            <summary><i>Printers</i> folder.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.StandardFolder.Recent">
            <summary><i>Recent</i> folder.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.StandardFolder.SendTo">
            <summary><i>Send To</i> folder.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.StandardFolder.StartMenu">
            <summary>Start menu root.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.StandardFolder.Templates">
            <summary><i>Templates</i> folder.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.StateChangedEventArgs">
            <summary>Provides arguments for the <see cref="E:Aurigma.GraphicsMill.WinControls.IListItem.StateChanged" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> and <see cref="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.StateChanged" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListItemCollection" /> class.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.StateChangedEventArgs.#ctor(Aurigma.GraphicsMill.WinControls.IListItem,Aurigma.GraphicsMill.WinControls.StateType)">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.StateChangedEventArgs" /> class instance.</summary>
            <param name="item">The list item object whose state has been changed.</param>
            <param name="stateType"><see cref="T:Aurigma.GraphicsMill.WinControls.StateType" /> value which identifies the state which has been changed.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.StateChangedEventArgs.StateType">
            <summary>Gets an item state which has been changed.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.WinControls.StateType" /> value which identifies the state which has been changed.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.StateChangedEventHandler">
            <summary>This delegate represents the method that will handle the <b>StateChanged</b> events of the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> class and  the <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumnCollection" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.StateChangingEventArgs">
            <summary>Provides arguments for the <see cref="E:Aurigma.GraphicsMill.WinControls.IListItem.StateChanging" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> and <see cref="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.StateChanging" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListItemCollection" /> class.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.StateChangingEventArgs.Cancel">
            <summary>Gets/sets the value indicating whether the item state changes should be cancelled.</summary>
            <value>A <see cref="T:System.Boolean" /> value indicating whether the item state changes should be cancelled.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.StateChangingEventArgs.#ctor(Aurigma.GraphicsMill.WinControls.IListItem,Aurigma.GraphicsMill.WinControls.StateType)">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.StateChangingEventArgs" /> class instance.</summary>
            <param name="item">The list item object whose state is about to be changed.</param>
            <param name="stateType"><see cref="T:Aurigma.GraphicsMill.WinControls.StateType" /> value which identifies the state which is about to be changed.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.StateChangingEventArgs.StateType">
            <summary>Gets an item state which is about to be changed.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.WinControls.StateType" /> value which identifies the state which is about to be changed.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.StateChangingEventHandler">
            <summary>This delegate represents the method that will handle the <b>StateChanging</b> events of the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> class and  the <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumnCollection" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.StateType">
            <summary>Contains values identifying <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> states.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.StateType.Check">
            <summary>Item is checked (checkbox of the item is not cleared).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.StateType.Focus">
            <summary>Item is focused (i.e. the cursor is set on the item).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.StateType.Selection">
            <summary>Item is selected (i.e. it is highlighted by the blue frame).</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.TextChangedEventArgs">
            <summary>Provides arguments for the <see cref="E:Aurigma.GraphicsMill.WinControls.IListItem.TextChanged" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> and <see cref="E:Aurigma.GraphicsMill.WinControls.ListItemCollection.TextChanged" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListItemCollection" /> class.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.TextChangedEventArgs.#ctor(Aurigma.GraphicsMill.WinControls.IListItem,System.Int32)">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.TextChangedEventArgs" /> class instance.</summary>
            <param name="item">The <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> object whose text has been changed.</param>
            <param name="textInfoId">An integer value which identifies piece of data which has been changed.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.TextChangedEventArgs.TextInfoId">
            <summary>Gets an identifier of the textual piece of data which has been modified.</summary>
            <value>An integer value which identifies piece of data which has been changed.</value>
            <remarks><para><see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem" /> class provides access to the following pieces of text information: </para><list type="table"><listheader><term> Constant </term><description> Description </description></listheader><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdCreationDate" /></term><description>File creation date.
</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdDisplayName" /></term><description>Display name of the item (its file name without path with or without extention depending on Windows settings).
</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdFileSize" /></term><description>File size.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdFileType" /></term><description>File type name (as registered in Windows).</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdPath" /></term><description>Full path to the file.</description></item></list><para>If you implement your own list items, you should define identifiers of pieces of text information yourself.</para></remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.TextChangedEventHandler">
            <summary>This delegate represents the method that will handle the <b>TextChanged</b> events of the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> class and  the <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumnCollection" /> class.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem">
            <summary>This class represents items of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control based on file system objects.</summary>
            <remarks><para>This class is a standard implementation of the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> interface. It represents file system items such as files, folders, drives, digital cameras, removable media, etc. You can create an item of this class either on path string or a <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object. If the item is a file of format supported by Graphics Mill for .NET, the thumbnail is displayed. Otherwise standard icon is used instead of the thumbnail.</para><para>To display files in this control, just create instances of this class and pass to the <see cref="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.Items" /> collection of the necessary <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control. Note, you cannot pass one item to several controls. If you need to display the same file in two or more controls, use the method <see cref="M:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.Clone" /> to get a copy of the object.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.Clone">
            <summary>Creates a new object that is a copy of the current instance.</summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.Create(Aurigma.GraphicsMill.WinControls.Pidl[])">
            <summary>Creates an array of <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem" /> objects based on specified <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> objects.</summary>
            <param name="pidls">An array of source <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> objects used to create new items.</param>
            <returns>An array of <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem" /> objects.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.EvaluateMethod(System.Int32)">
            <summary>Starts execution of the specified method.</summary>
            <param name="methodIndex">Method index.</param>
            <remarks><para>No need to use this method directly.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.GetIconKey(Aurigma.GraphicsMill.WinControls.View)" draft="yes">
            <summary>Returns a key of the item icon for the specified <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.View" /> of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control.</summary>
            <param name="view">A <see cref="T:Aurigma.GraphicsMill.WinControls.View" /> enumeration member identifying the view mode to extract an icon key for.</param>
            <returns>A key of the item icon in one of the control image lists. The image list depends on the specified <paramref name="view" /> parameter. If the item has no icon for the specified <paramref name="view" />, <b>null</b> is returned.</returns>
            <remarks><para>Although the return value <b>null</b> means that no icon is available, if you try to get an icon later, you may find out that it returns a correct index of the icon. This fact is explained by an asynchronous nature of item loading. Potentially, you can call this method before the control loads the item, and therefore it cannot return an icon. However, after you try to retrieve this item, its priority is increased (it is moved to the head of the item queue), and you can get the icon as soon as possible.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.GetMethodState(System.Int32)">
            <summary>Gets the state of the specified method.</summary>
            <param name="methodIndex">An integer value that specifies an index of the method.</param>
            <returns><see cref="T:Aurigma.GraphicsMill.WinControls.QueueItemMethodState" /> value that specifies whether the method was started, finished, or never launched.</returns>
            <remarks><para>No need to use this method directly.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.GetText(System.Int32)" draft="yes">
            <summary>Returns the specified text information of the item.</summary>
            <param name="textInfoId">An integer value identifying the type of requested text information.</param>
            <returns>A string containing requested text information of the item. If the item has no text of specified type, it returns the empty string.</returns>
            <remarks><para><see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem" /> class provides access to the following pieces of text information: </para><list type="table"><listheader><term> Constant </term><description> Description </description></listheader><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdCreationDate" /></term><description>File creation date.
</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdDisplayName" /></term><description>Display name of the item (its file name without path with or without extention depending on Windows settings).
</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdFileSize" /></term><description>File size.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdFileType" /></term><description>File type name (as registered in Windows).</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdPath" /></term><description>Full path to the file.</description></item></list><note><para>Do not overload this method to change (concatenate) strings. There are two reasons for that:</para><list type="number"><item><description>This method is performed aynchronously, that is when this method is called for the first time, it returns null and start the load of the text string. After the string is loaded, the <see cref="E:Aurigma.GraphicsMill.WinControls.ListItem.TextChanged" /> event is raised, and only then the null value is replaced with the new string.</description></item><item><description>This method is called every time the control needs to repaint the item, or when it by any other reason needs to know that text string. So if you overload it for concatenating string (for example, adding prefixes), every time the list item is repainted, a new concatenation will be performed.</description></item></list><para>The solution is to overload the <see cref="M:Aurigma.GraphicsMill.WinControls.ListItem.OnTextChanged(System.Int32)" /> method.</para></note></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.GetThumbnail">
            <summary>Returns a thumbnail of the item.</summary>
            <returns>A bitmap that is used as a thumbnail of the item.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.HasIcon(Aurigma.GraphicsMill.WinControls.View)">
            <summary>Determines if an icon for the specified view exists.</summary>
            <param name="view">A <see cref="T:Aurigma.GraphicsMill.WinControls.View" /> enumeration member.</param>
            <returns><b>true</b> if the icon exists; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.InitializeIQueueItemVariables(System.Int32)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.MethodCount">
            <summary>Gets a number of methods which the <see cref="M:Aurigma.GraphicsMill.WinControls.IQueueItem.EvaluateMethod(System.Int32)" /> can execute.</summary>
            <value>A number of methods supported by the item. In fact it specifies the upper bound for the <i>methodIndex</i> argument of the <see cref="M:Aurigma.GraphicsMill.WinControls.IQueueItem.EvaluateMethod(System.Int32)" /> method.</value>
            <remarks><para>No need to use this property directly.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.#ctor(Aurigma.GraphicsMill.WinControls.Pidl)" draft="yes">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem" /> class instance.  The instance represents a file system object pointed by the <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object.</summary>
            <param name="pidl">A <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> object which points to the file system object (file or folder) to create an item for.</param>
            <overloads><summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem" /> class instance.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.#ctor(Aurigma.GraphicsMill.WinControls.StandardFolder)" draft="yes">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem" /> class instance.  The instance represents a special folder like <i>Desktop</i> or <i>My Computer</i>.</summary>
            <param name="standardFolder"><see cref="T:Aurigma.GraphicsMill.WinControls.StandardFolder" /> value which points to the special folder to create an item for.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.#ctor(Aurigma.GraphicsMill.WinControls.ThumbnailListItem)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.#ctor(System.String)" draft="yes">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem" /> class instance.  The instance represents a file system object pointed by the path string.</summary>
            <param name="path">A path to the file system object (file or folder) to create an item for.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.OnThumbnailLoaded(Aurigma.GraphicsMill.Bitmap)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.Parent">
            <summary>Gets/sets a parent <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control.</summary>
            <value>Parent <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> object.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.Pidl">
            <summary>Gets the PIDL associated with the current item.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> class instance which represents a Shell namespace object associated with this item.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.Reload">
            <summary>Updates the list item, if its thumbnail bitmap is changed.</summary>
            <remarks><para>This method should be called after the thumbnail bitmap is changed.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.SetMethodState(System.Int32,Aurigma.GraphicsMill.WinControls.QueueItemMethodState)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.SetThumbnail(Aurigma.GraphicsMill.Bitmap)">
            <summary>Sets a thumnbail of the list item.</summary>
            <param name="thumbnail">A bitmap that will be used as a thumbnail of the item.</param>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdCreationDate">
            <summary>Identifier of the creation date column. Value is 3.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdDisplayName">
            <summary>Identifier of the display name column. Value is 0.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdFileSize">
            <summary>Identifier of the file size column. Value is 1.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdFileType">
            <summary>Identifier of the file type column. Value is 2.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdPath">
            <summary>Identifier of the path column. Value is 4.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView">
            <summary>This class represents a list view control, which displays a collection of items that can be displayed using one of four different views: thumbnails, simple list, details, icons.</summary>
            <remarks><para><see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control allows you to display list of items with text and an image to identify the type of item. The identifying icon depends on the control's current view mode and can be small icon, large icon or an item thumbnail. Small icons are displayed in the <see cref="F:Aurigma.GraphicsMill.WinControls.View.Icons" /> and <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" /> modes, large icons are displayed in the <see cref="F:Aurigma.GraphicsMill.WinControls.View.Icons" /> mode and thumbnails - in <see cref="F:Aurigma.GraphicsMill.WinControls.View.Thumbnails" /> mode. Appearance of the control is very similar to the Windows Explorer list of files, so users will have well-known interface.</para><para>The single list item is represented by an object which implements the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> interface. Graphics Mill for .NET has a <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem" /> class which represents an implementation of this interface based on shell objects. Shell objects are represented by the <see cref="T:Aurigma.GraphicsMill.WinControls.Pidl" /> class. They include a file system objects and some extra items such as special folder (<i>Desktop</i>, <i>My Pictures</i>, etc), USB storage devices, digital cameras, etc. </para><para>You can also implement this interface yourself. This way you can display items from a database, etc.</para><para>To get access to list items, use the <see cref="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.Items" /> property. If you need to get items which are selected, you can use <see cref="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.SelectedIndices" /> or <see cref="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.SelectedItems" /> property. In the same way you can get checked items: just use <see cref="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.CheckedIndices" /> or <see cref="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.CheckedItems" /> property.</para><para>
The control exposes a large number of properties which allow you to change its behavior and appearance. E.g. possibility to display check boxes for each item (<see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.CheckBoxes" />), multiple items selection (<see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.MultiSelect" />), drag-n-drop support, editable labels of items (<see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.LabelEdit" />), etc. 
</para><para>When you are using <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" /> view mode, you should set up columns using the <see cref="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.Columns" /> property. You should fill it with instances of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumn" /> class which identify what columns should be visible and what piece of data to display. </para><para>When you work with <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" /> view, you can use a number of handy properties. E.g. the <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.AllowColumnReorder" /> property allows the user of your <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control to reconfigure the 
order of columns at run time. The <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.FullRowSelect" /> property allows an item and its subitems to be selected instead of just the item. To display grid lines in the details view to identify the boundaries of 
items and subitems in the control, you can use the <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.Gridlines" /> property. The <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.HeaderStyle" /> property allows you to specify the type of column headers to display.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListView.CheckAll" draft="yes">
            <summary>Checks all the items in the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" />.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.CheckedIndices">
            <summary>Gets an array of indices of items which have been checked (i.e. checkboxes of these items are marked).</summary>
            <value>An array of indices of checked items. If no items checked, empty array is returned.</value>
            <seealso cref="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.CheckedItems" />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.CheckedItems">
            <summary>Gets an array of items which have been checked (i.e. checkboxes of these items are marked).</summary>
            <value>An array of list item objects that are checked. If no items checked, empty array is returned.</value>
            <seealso cref="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.CheckedIndices" />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.Columns">
            <summary>Gets a collection of control columns (which are visible in the <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" /> view mode).</summary>
            <value>An instance of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListColumnCollection" /> class which keeps columns of the control.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListView.DeselectAll" draft="yes">
            <summary>Clears the selection from all items.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListView.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.Items">
            <summary>Gets a collection of the list items.</summary>
            <value>An instance of the <see cref="T:Aurigma.GraphicsMill.WinControls.ListItemCollection" /> class which stores items associated with this control.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListView.#ctor">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> class instance.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListView.SelectAll" draft="yes">
            <summary>Selects all the items in the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" />.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.SelectedIndices">
            <summary>Gets an array of indices of items which have been selected (i.e. highlighted by a blue frame).</summary>
            <value>An array of indices of selected items. If no items selected, empty array is returned.</value>
            <seealso cref="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.SelectedItems" />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.SelectedItems">
            <summary>Gets an array of items which have been selected (i.e. highlighted by a blue frame).</summary>
            <value>An array of list item objects that are selected. If no items selected, empty array is returned.</value>
            <seealso cref="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.SelectedIndices" />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.SortOnColumnClick">
            <summary>Gets/sets a value that specify whether to sort items in <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" /> if the column header is clicked.</summary>
            <value>A <see cref="T:System.Boolean" /> value that specify whether to sort items in <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" /> if the column header is clicked.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ThumbnailListView.UncheckAll" draft="yes">
            <summary>Unchecks all the items in the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" />.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.UseDragToMove">
            <summary>Gets/sets a value which determines whether user can use drag-n-drop operations to re-arrange items in the control.</summary>
            <value>A <see cref="T:System.Boolean" /> value which determines whether the user can use drag-n-drop operations to change items order in the control.</value>
            <remarks><para>If items order is important for your application logic, you can enable this property to provide easy way to change items order simply by drag-n-drop. But if you need to implement more sophisticated drag-n-drop operations you should set <see cref="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.UseDragToMove" /> property to <b>false</b> and handle <see cref="E:Aurigma.GraphicsMill.WinControls.VirtualListView.ItemDrag" /> and other related events manually.</para></remarks>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.UserInputController">
            <summary>This class contains the partial implementation for the <see cref="T:Aurigma.GraphicsMill.WinControls.IUserInputController" /> interface.</summary>
            <remarks><para>When you create a custom navigator or rubberband, you can inherit your class from this one, and override its protected members. Note, this class is an abstract one, you cannot instantiate it directly.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.UserInputController.Connect(Aurigma.GraphicsMill.WinControls.ViewerBase)">
            <summary>Connects this user input controller (navigator or rubberband) to the viewer control.</summary>
            <param name="viewer">A viewer to connect to.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.UserInputController.Disconnect">
            <summary>Disconnects this user input controller (navigator or rubberband) from the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> control.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.UserInputController.IsUserInputEnabled">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.UserInputController.IsViewerAttached">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.UserInputController.#ctor">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.UserInputController.OnViewerContentChanged(System.EventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.UserInputController.OnViewerDoubleBufferPaint(System.Windows.Forms.PaintEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.UserInputController.OnViewerDoubleClick(System.EventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.UserInputController.OnViewerKeyDown(System.Windows.Forms.KeyEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.UserInputController.OnViewerKeyUp(System.Windows.Forms.KeyEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.UserInputController.OnViewerMouseDown(System.Windows.Forms.MouseEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.UserInputController.OnViewerMouseMove(System.Windows.Forms.MouseEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.UserInputController.OnViewerMouseUp(System.Windows.Forms.MouseEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.UserInputController.OnViewerScrolled(System.EventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.UserInputController.OnViewerSizeChanged(System.EventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.UserInputController.OnViewerZoomed(System.EventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.UserInputController.Update">
            <summary>This method is called by the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> when it needs to be repainted or updated in any other way.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.UserInputController.UpdateCursor(System.Boolean,System.Drawing.Point)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.UserInputController.Viewer">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.UserInputController.ViewerHasContent">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.View">
            <summary>Contains possible values for <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.View" /> property of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.View.Details">
            <summary>Detailed list. Items are displayed in the control as rows of a table. Each column holds specific item data (e.g. file name, size, etc).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.View.Icons">
            <summary>Icon view. Each item is displayed as a full-sized icon with a label below it.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.View.List">
            <summary>Simple list. Each item is displayed as small icon with a label from the right. All items are arranged into columns with no columns headers.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.View.Thumbnails">
            <summary>Thumbnail view. Each item is displayed as an image thumbnail with a label below it. If the list item does not represent an image file, an icon is displayed for it.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ViewChangedEventArgs">
            <summary>Provides arguments for the <see cref="E:Aurigma.GraphicsMill.WinControls.VirtualListView.ViewChanged" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> class.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewChangedEventArgs.#ctor(Aurigma.GraphicsMill.WinControls.View)">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ViewChangedEventArgs" /> class instance.</summary>
            <param name="newView">A <see cref="T:Aurigma.GraphicsMill.WinControls.View" /> value which specifies new view mode.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewChangedEventArgs.NewView">
            <summary>Gets new view mode of the control.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.WinControls.View" /> value which specifies new view mode.</value>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ViewChangedEventHandler">
            <summary>This delegate represents the method that will handle the <see cref="E:Aurigma.GraphicsMill.WinControls.VirtualListView.ViewChanged" /> event of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> class and its descendants.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ViewerBase">
            <summary>This is an abstract class representing a generic viewer control.</summary>
            <remarks><para>Typically, there is no need to use this class directly.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.ApplyZoom(System.Single)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.BorderStyle">
            <summary>Gets/sets the border style of the control.</summary>
            <value>The member of the <see cref="T:System.Windows.Forms.Border3DStyle" /> enumeration which specifies the border style of the control.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.ControlGdiGraphics">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.ControlToWorkspace(System.Drawing.Point,Aurigma.GraphicsMill.Unit)" draft="yes">
            <summary>Converts point coordinates from control-related to workspace-related ones.</summary>
            <param name="controlPoint">The point containing values measured in the coordinates of the control.</param>
            <param name="workspaceUnit">The physical unit of measure.</param>
            <returns>A point containing the values of the <paramref name="controlPoint" /> argument translated into the coordinates of the workspace.</returns>
            <remarks><para>To apply a translation from the workspace coordinates to control coordinates, use the <see cref="M:Aurigma.GraphicsMill.WinControls.ViewerBase.WorkspaceToControl(System.Drawing.PointF,Aurigma.GraphicsMill.Unit)" /> method.</para></remarks>
            <overloads><summary>Converts coordinates from control-related to workspace-related ones.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.ControlToWorkspace(System.Drawing.Rectangle,Aurigma.GraphicsMill.Unit)" draft="yes">
            <summary>Converts rectangle coordinates and dimensions from control-related to workspace-related ones.</summary>
            <param name="controlRectangle">A rectangle containing values measured in the coordinates of the control.</param>
            <param name="workspaceUnit">The physical unit of measure.</param>
            <returns>A rectangle containing the values of the <paramref name="controlRectangle" /> argument translated into the coordinates of the workspace.</returns>
            <remarks><para>To apply a translation from the workspace coordinates to control coordinates, use the <see cref="M:Aurigma.GraphicsMill.WinControls.ViewerBase.WorkspaceToControl(System.Drawing.RectangleF,Aurigma.GraphicsMill.Unit)" /> method.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.DefaultCursor">
            <summary>Gets/sets default cursor for a control.</summary>
            <value><see cref="T:System.Windows.Forms.Cursor" /> that specifies a cursor which should be used by default.</value>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ViewerBase.DoubleBufferPaint">
            <summary>Raised before a control copies a bitmap from the memory buffer to the screen during repaint.</summary>
            <remarks><para>Use this event to draw your custom graphics at the control (rather than at the bitmap).</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.DrawControlBorder">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.GetCanvasBounds">
            <summary>Returns a rectangle of the viewer client area (without scroll bars).</summary>
            <returns>A rectangle representing the viewer client area.</returns>
            <remarks><para>Left-top corner coordinates are measured relatively to the parent form using its coordinate system. Width and height do not include scroll bars and a border.</para><para>To get a rectangle occupied by the image inside the control, use the <see cref="M:Aurigma.GraphicsMill.WinControls.ViewerBase.GetViewportBounds" /> method.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.GetControlPixelsPerUnitX(Aurigma.GraphicsMill.Unit)">
            <summary>Returns the horizontal resolution, in pixels per the specified unit.</summary>
            <param name="workspaceUnit">The physical unit of measure.</param>
            <returns>The horizontal resolution.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.GetControlPixelsPerUnitY(Aurigma.GraphicsMill.Unit)">
            <summary>Returns the vertical resolution, in pixels per the specified unit.</summary>
            <param name="workspaceUnit">The physical unit of measure.</param>
            <returns>The vertical resolution.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.GetViewportBounds">
            <summary>Returns a rectangle where the image is displayed.</summary>
            <returns>A rectangle where the image is displayed.</returns>
            <remarks><para>Left-top corner coordinates are measured relatively to the return value of the <see cref="M:Aurigma.GraphicsMill.WinControls.ViewerBase.GetCanvasBounds" /> method. Width and height do not include a bitmap border.</para><para>If the image is larger than the control client area, left and top coordinates are equal to <b>0</b>, and width and height of this rectangle are the same as the width and the height of the <see cref="M:Aurigma.GraphicsMill.WinControls.ViewerBase.GetCanvasBounds" /> return value.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.HasContent">
            <summary>Gets a value indicating if the viewer displays any content.</summary>
            <value>A value indicating if the viewer displays any content.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.InvalidateViewer" draft="yes">
            <summary>Invalidates the control and causes it to be repainted.</summary>
            <remarks><para>It is recommended to use this method instead of <see cref="M:System.Windows.Forms.Control.Invalidate">System.Windows.Forms.Control.Invalidate</see>.</para></remarks>
            <overloads><summary>Invalidates the control and causes it to be repainted.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.InvalidateViewer(Aurigma.GraphicsMill.WinControls.InvalidationTarget)" draft="yes">
            <summary>Invalidates the specified target of the control and causes it to be repainted.</summary>
            <param name="target">A descendant of the <see cref="T:Aurigma.GraphicsMill.WinControls.InvalidationTarget" /> class that needs to be repainted.</param>
            <remarks><para>It is recommended to use this method instead of <see cref="M:System.Windows.Forms.Control.Invalidate">System.Windows.Forms.Control.Invalidate</see>.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.InvalidateViewer(System.Drawing.Rectangle)" draft="yes">
            <summary>Invalidates the specified region of the control and causes it to be repainted.</summary>
            <param name="rectangle">A rectangle that represents the region to invalidate.</param>
            <remarks><para>It is recommended to use this method instead of <see cref="M:System.Windows.Forms.Control.Invalidate">System.Windows.Forms.Control.Invalidate</see>.</para><para>This method allows repainting of a specific region belonging to the control.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.MaxZoom">
            <summary>Gets/sets a maximum allowed zoom value.</summary>
            <value>A number that specifies a maximum allowed zoom value.</value>
            <remarks><para>Zoom values are measured in percents/100. It means that value = 1 specifies the 100% zoom (actual size), value = 10 means 1000% zoom (10x magnification), value = 0,5 means 50% zoom (half of the original size), and so on.</para><para>The default value is <b>16</b>.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.MinZoom">
            <summary>Gets/sets a minimum allowed zoom value.</summary>
            <value>A number that specifies a minimum allowed zoom value.</value>
            <remarks><para>Zoom values are measured in percents/100. It means that value = 1 specifies the 100% zoom (actual size), value = 10 means 1000% zoom (10x magnification), value = 0,5 means 50% zoom (half of the original size), and so on.</para><para>The default value is <b>16</b>.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Navigator">
            <summary>Gets/sets a navigator control which is responsible for the user input.</summary>
            <value>An object implementing the <see cref="T:Aurigma.GraphicsMill.WinControls.INavigator" /> interface, which is responsible for the user input.</value>
            <remarks><para>You can use such navigators as:</para><list type="bullet"><item><term><see cref="T:Aurigma.GraphicsMill.WinControls.ZoomInNavigator" /></term><description>left-button click zooms the image in, right-button click zooms it out.</description></item><item><term><see cref="T:Aurigma.GraphicsMill.WinControls.ZoomOutNavigator" /></term><description>left-button click zooms the image out, right-button click zooms it in.</description></item><item><term><see cref="T:Aurigma.GraphicsMill.WinControls.ZoomRectangleNavigator" /></term><description>the user defines a rectangle by the mouse and when the mouse button is released, the selected rectangle iz zoomed in.</description></item><item><term><see cref="T:Aurigma.GraphicsMill.WinControls.PanNavigator" /></term><description>when the user presses the mouse button down and moves the mouse, the image is panned until the user releases the button.</description></item></list></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.#ctor">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.OnDoubleBufferPaint(System.Windows.Forms.PaintEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.OnScrolled(System.EventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.OnWorkspaceChanged(System.EventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.OnWorkspaceMouseDown(Aurigma.GraphicsMill.WinControls.MouseEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.OnWorkspaceMouseMove(Aurigma.GraphicsMill.WinControls.MouseEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.OnWorkspaceMouseUp(Aurigma.GraphicsMill.WinControls.MouseEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.OnZoomed(System.EventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.RestoreCursorToDefault">
            <summary>Resets the current cursor to <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.DefaultCursor" /></summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Rubberband">
            <summary>Gets/sets a currently attached rubberband control.</summary>
            <value>An object implementing the <see cref="T:Aurigma.GraphicsMill.WinControls.IRubberband" /> interface and specifying a currently attached rubberband control.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.Scroll(System.Boolean,Aurigma.GraphicsMill.WinControls.ScrollValue)" draft="yes">
            <summary>Moves one of the scroll bars to the specified position.</summary>
            <param name="scrollVertically">A value indicating which scroll bar should be moved. If <b>true</b>, the vertical scroll bar will change its position; otherwise, the horizontal scroll bar will move.</param>
            <param name="scrollValue">A <see cref="T:Aurigma.GraphicsMill.WinControls.ScrollValue" /> enumeration member defining a position to which the scroll bar should be moved.</param>
            <overloads><summary>Moves the scroll bar to a specified position.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.Scroll(System.Int32,System.Int32)">
            <summary>Moves scroll bars by the specified values.</summary>
            <param name="horizontalDelta">Shift of the horizontal scroll bar.</param>
            <param name="verticalDelta">Shift of the vertical scroll bar.</param>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.ScrollBarsStyle" draft="yes">
            <summary>Gets/sets a value that specifies how to display scroll bars. The following three modes are supported: 
<list type="bullet"><item>scroll bars are always displayed regardless to the control content dimensions;</item><item>scroll bars are displayed when control content is too large to fit the control client area;</item><item>scroll bars are never displayed.</item></list></summary>
            <value>The <see cref="T:Aurigma.GraphicsMill.WinControls.ScrollBarsStyle" /> enumeration member that specifies when to display the scroll bars.</value>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ViewerBase.Scrolled">
            <summary>Raised when a scroll bar is moved.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.ScrollingPosition">
            <summary>Gets/sets a position of the scroll bars.</summary>
            <value>A point that stores a position of the scroll bars.</value>
            <remarks><para>If you want to change a scroll bar position, you can also use the <see cref="M:Aurigma.GraphicsMill.WinControls.ViewerBase.Scroll(System.Int32,System.Int32)" /> method.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Unit">
            <summary>Gets/sets a physical unit of measure for the viewer.</summary>
            <value>A physical unit of measure.</value>
            <remarks><para><see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.WorkspaceWidth" /> and <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.WorkspaceHeight" /> are measured in this units. During the conversion between this units and pixels, the screen resolution is used (usually, it is 96 DPI).</para></remarks>
            <seealso cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.WorkspaceWidth" />
<seealso cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.WorkspaceHeight" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.UpdateCanvas">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.UpdateZoom(System.Single)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.ViewerResolution">
            <summary>Gets the monitor resolution as it is specified in Windows settings.</summary>
            <value>Display resolution in DPI.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.ViewportAlignment" draft="yes">
            <summary>Gets/sets a value that specifies bitmap alignment in the control.</summary>
            <value>A value that specifies bitmap alignment in the control.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.WheelZoomAmount">
            <summary>Gets/sets a zooming factor used during a mouse wheel scroll.</summary>
            <value>A zooming factor used during a mouse wheel scroll.</value>
            <remarks><para>The <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Zoom" /> property is multiplied by this number when the mouse wheel is scrolled up and divided when the mouse wheel is scrolled down.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.WorkspaceBorderColor" draft="yes">
            <summary>Gets/sets color of the border around control's content.</summary>
            <value>A color of the border around control's content.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.WorkspaceBorderEnabled" draft="yes">
            <summary>Gets/sets a value that specifies whether to display border around control's content.</summary>
            <value>A value that specifies whether to display border around control's content.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.WorkspaceBorderWidth" draft="yes">
            <summary>Gets/sets the width of the border around control's content.</summary>
            <value>The width of the border around control's content.</value>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ViewerBase.WorkspaceChanged">
            <summary>Raised when the content of an associated workspace is changed or updated.</summary>
            <remarks><para>This event is raised in two cases:</para><list type="number"><item><description>When you modify the associated workspace.</description></item><item><description>When the bitmap or image displayed in the workspace raises the <b>Changed</b> event.</description></item></list></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.WorkspaceHeight">
            <summary>Gets/sets the height of the workspace.</summary>
            <value>The height of the workspace.</value>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ViewerBase.WorkspaceMouseDown">
            <summary>Raised when a mouse button is pressed down at the image displayed by this viewer control.</summary>
            <remarks><para>Position of the mouse pointer is measured in the coordinates of the workspace (physical units of measure).</para></remarks>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ViewerBase.WorkspaceMouseMove">
            <summary>Raised when the mouse is moved over the image displayed by this viewer control.</summary>
            <remarks><para>Position of the mouse pointer is measured in the coordinates of the workspace (physical units of measure).</para></remarks>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ViewerBase.WorkspaceMouseUp">
            <summary>Raised when a mouse button is released at the image displayed by this viewer control.</summary>
            <remarks><para>Position of the mouse pointer is measured in the coordinates of the workspace (physical units of measure).</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.WorkspaceToControl(System.Drawing.PointF,Aurigma.GraphicsMill.Unit)" draft="yes">
            <summary>Converts point coordinates from workspace-related to control-related ones.</summary>
            <param name="workspacePoint">A point containing values measured in the coordinates of the workspace.</param>
            <param name="workspaceUnit">The physical unit of measure.</param>
            <returns>A point containing the values of the <paramref name="workspacePoint" /> argument translated into the coordinates of the control.</returns>
            <remarks><para>To apply a translation from the control coordinates to workspace coordinates, use the <see cref="M:Aurigma.GraphicsMill.WinControls.ViewerBase.ControlToWorkspace(System.Drawing.Point,Aurigma.GraphicsMill.Unit)" /> method.</para></remarks>
            <overloads><summary>Converts coordinates from workspace-related to control-related ones.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ViewerBase.WorkspaceToControl(System.Drawing.RectangleF,Aurigma.GraphicsMill.Unit)" draft="yes">
            <summary>Converts rectangle coordinates and dimensions from workspace-related to control-related ones.</summary>
            <param name="workspaceRectangle">A rectangle containing values measured in the coordinates of the workspace.</param>
            <param name="workspaceUnit">The physical unit of measure.</param>
            <returns>A rectangle containing the values of the <paramref name="workspaceRectangle" /> argument translated into the coordinates of the control.</returns>
            <remarks><para>To apply a translation from the control coordinates to workspace coordinates, use the <see cref="M:Aurigma.GraphicsMill.WinControls.ViewerBase.ControlToWorkspace(System.Drawing.Rectangle,Aurigma.GraphicsMill.Unit)" /> method.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.WorkspaceWidth">
            <summary>Gets/sets the width of the workspace.</summary>
            <value>The width of the workspace.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Zoom">
            <summary>Gets/sets a current zoom value.</summary>
            <value>A number that specifies a current zoom value.</value>
            <remarks><para>Zoom values are measured in percents/100. It means that value = 1 specifies the 100% zoom (actual size), value = 10 means 1000% zoom (10x magnification), value = 0,5 means 50% zoom (half of the original size), and so on.</para><para>The default value is <b>1</b>.</para><note>Note, when <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.ZoomMode" /> is not <see cref="F:Aurigma.GraphicsMill.WinControls.ZoomMode.None" />, this property is ignored.</note></remarks>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.ViewerBase.Zoomed">
            <summary>Raised when the image displayed in this viewer control is zoomed.</summary>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.ZoomInternal">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.ZoomMode">
            <summary>Gets/sets a zooming behavior of a control (automatic or manual).</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.WinControls.ZoomMode" /> member that specifies a zooming behavior.</value>
            <remarks><para>In a manual zoom mode, when this property value is <see cref="F:Aurigma.GraphicsMill.WinControls.ZoomMode.None" />, you can change the bitmap zoom either using the <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Zoom" /> property or some zooming <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Navigator">navigator</see>.</para><para>When the control is in one of automatic modes (<see cref="F:Aurigma.GraphicsMill.WinControls.ZoomMode.BestFit" />, <see cref="F:Aurigma.GraphicsMill.WinControls.ZoomMode.FitToWidth" />, and so on), you cannot change the zoom manually, that is the <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Zoom" /> value will be ignored. That is why you will need to set this property to <see cref="F:Aurigma.GraphicsMill.WinControls.ZoomMode.None" />.</para><note>Note, when you set <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Navigator" /> to some zooming navigator, this property is reset to <see cref="F:Aurigma.GraphicsMill.WinControls.ZoomMode.None" />.</note></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.ViewerBase.ZoomModeInternal">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ViewportAlignment">
            <summary>Contains possible values for the image alignment inside the control.</summary>
            <remarks>Makes sense only when the image displayed at the control is smaller than the client area of the control.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ViewportAlignment.CenterBottom">
            <summary>The bitmap is aligned by the center horizontally and by the bottom vertically.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ViewportAlignment.CenterCenter">
            <summary>The bitmap is aligned by the center horizontally and by the center vertically.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ViewportAlignment.CenterTop">
            <summary>The bitmap is aligned by the center horizontally and by the top vertically.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ViewportAlignment.LeftBottom">
            <summary>The bitmap is aligned by the left side horizontally and by the bottom vertically.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ViewportAlignment.LeftCenter">
            <summary>The bitmap is aligned by the left side horizontally and by the center vertically.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ViewportAlignment.LeftTop">
            <summary>The bitmap is aligned by the left side horizontally and by the top vertically.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ViewportAlignment.RightBottom">
            <summary>The bitmap is aligned by the right side horizontally and by the bottom vertically.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ViewportAlignment.RightCenter">
            <summary>The bitmap is aligned by the right side horizontally and by the center vertically.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ViewportAlignment.RightTop">
            <summary>The bitmap is aligned by the right side horizontally and by the top vertically.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.VirtualListView" draft="yes">
            <summary>This class represents a partial implementation of the thumbnail list view control.</summary>
            <remarks><para>This is a base class for the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control. Typically there is no need to use this class directly.</para></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.Activation">
            <summary>Gets/sets the type of action the user must take to activate an item.</summary>
            <value><see cref="T:System.Windows.Forms.ItemActivation" /> value that specifies an action which activates an item. The default is <see cref="F:System.Windows.Forms.ItemActivation.Standard" />.</value>
            <remarks><para>The <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.Activation" /> property allows you to specify how the user will activate an item in the control. When item is activated, the <see cref="E:Aurigma.GraphicsMill.WinControls.VirtualListView.ItemActivate" /> event is raised. This way you can open selected item in a separate window or perform any other action. </para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.AllowColumnReorder">
            <summary>Gets/sets a value indicating whether the user can reorder columns of the <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" /> view by the mouse.</summary>
            <value><b>true</b> if columns can be rearranged by the user; otherwise, <b>false</b>. The default is <b>false</b>.</value>
            <remarks><para>Setting the value of the <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.AllowColumnReorder" /> property has no effect unless the <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.View" /> property is set to <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" />. You can use this property to allow users to reposition columns in the control at run time. When this property is set to <b>true</b>, users can position the columns in the control to display the item and its subitems in a way that meets their needs within your application.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.ArrangeIcons(System.Windows.Forms.ListViewAlignment)">
            <summary>Arranges items in the control when they are displayed as icons.</summary>
            <param name="value"><see cref="T:System.Windows.Forms.ListViewAlignment" /> that specify how to arrange the list items.</param>
            <remarks><para>If <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.AutoArrange" /> property is <b>true</b>, items are automatically get arranged.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.AutoArrange">
            <summary>Gets/sets whether icons are automatically kept arranged.</summary>
            <value><b>true</b> if icons are automatically kept arranged and snapped to the grid; otherwise, <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.BackColor">
            <summary>Gets/sets the background color for the control.</summary>
            <value>A <see cref="T:System.Drawing.Color" /> that represents the background color of the control.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.BackgroundImageOffset">
            <summary>Gets/sets an offset at which the background image should be moved from the top left corner of a thumbnail region.</summary>
            <value>An offset at which the background image should be moved from the top left corner of a thumbnail region, in pixels.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.BackgroundImageTiled">
            <summary>Gets/sets a value determining if the background image should be tiled.</summary>
            <value>A value determining if the background image should be tiled.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.BeginUpdate">
            <summary>Prevents changes in that window from being redrawn until the <see cref="M:Aurigma.GraphicsMill.WinControls.VirtualListView.EndUpdate" /> method is called.</summary>
            <remarks><para>Use this method when you add multiple items one by one to increase a performance. Do not forget to call <see cref="M:Aurigma.GraphicsMill.WinControls.VirtualListView.EndUpdate" /> method when you have added all items which you need and want the control to display all of them.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.WinControls.VirtualListView.EndUpdate" />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.BorderSelection">
            <summary>Gets a value that specify how to display items selection.</summary>
            <value><b>true</b> if change of the border color is used to mark selection of the item. If it is <b>false</b>, items are highlighted instead.</value>
            <remarks><para>This property affects only when the control is in <see cref="F:Aurigma.GraphicsMill.WinControls.View.Thumbnails" /> mode.
</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.BorderStyle">
            <summary>Gets/sets the border style of the control.</summary>
            <value><see cref="T:System.Windows.Forms.BorderStyle" /> value that specify the border style of the control. The default is <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D" />.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.CheckBoxes">
            <summary>Gets/sets a value indicating whether a check box appears next to each item in the control.</summary>
            <value><b>true</b> if a check box appears next to each item in the control; otherwise, <b>false</b>. The default is <b>false</b>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.CreateParams">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.EndUpdate">
            <summary>Resumes redrawing of the list view control after drawing is suspended by the <see cref="M:Aurigma.GraphicsMill.WinControls.VirtualListView.BeginUpdate" /> method.</summary>
            <remarks><para>Must be called after <see cref="M:Aurigma.GraphicsMill.WinControls.VirtualListView.BeginUpdate" /> call. Otherwise the control will stop repainting.</para></remarks>
            <seealso cref="M:Aurigma.GraphicsMill.WinControls.VirtualListView.BeginUpdate" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.EnsureVisible(System.Int32)">
            <summary>Ensures that a list-view item becomes either entirely or partially visible, scrolling the list-view control if necessary.</summary>
            <param name="itemIndex">An index of the item which you want to make visible.</param>
            <returns><b>true</b> if successful, or <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.FindNearestItem(System.Int32,System.Int32)" draft="yes">
            <summary>Finds the item nearest to the specified coordinates. Search is supported only in icon and list modes.</summary>
            <param name="x">X-coordinate of the position to test.</param>
            <param name="y">Y-coordinate of the position to test.</param>
            <returns>The index of the item if successful, or -1 otherwise.</returns>
            <overloads><summary>Finds the item nearest to the specified coordinates. Search is supported only in icon and list modes.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.FindNearestItem(System.Drawing.Point)">
            <summary>Finds the item nearest to the specified coordinates. Search is supported only in icon and list modes.</summary>
            <param name="point">Coordinates of the position to test.</param>
            <returns>The index of the item if successful, or -1 otherwise.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.FocusedItem">
            <summary>Gets the item of the control that currently has the focus.</summary>
            <value>The list item object which currently has the focus.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.ForeColor">
            <summary>Gets/sets the foreground color of the control.</summary>
            <value>The foreground <see cref="T:System.Drawing.Color" /> of the control.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.FullRowSelect">
            <summary>Gets/sets a value indicating whether clicking an item selects all its subitems.</summary>
            <value><b>true</b> if clicking an item selects the item and all its subitems; <b>false</b> if clicking an item selects only the item itself. The default is <b>false</b>.</value>
            <remarks><para>The property has no effect unless the <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.View" /> property of the control is set to <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" />. The <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.FullRowSelect" /> property is typically used when a control displays items with many subitems and it is important to be able to see selected items when the item text is not visible due to horizontal scrolling of the control content.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.GetImageList(Aurigma.GraphicsMill.WinControls.View)">
            <summary>Returns a reference to the image list object for the specified <see cref="T:Aurigma.GraphicsMill.WinControls.View" /> mode of the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control.</summary>
            <param name="view"><see cref="T:Aurigma.GraphicsMill.WinControls.View" /> mode for which the image list is requested.</param>
            <returns>An object implementing the <see cref="T:Aurigma.GraphicsMill.WinControls.IImageList" /> interface which represents an image list for the specified <paramref name="view" />.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.GetInsertMark(System.Int32@,System.Boolean@)">
            <summary>Retrieves the position of the insertion mark.</summary>
            <param name="index">An index of the item next to which the insertion point appears.</param>
            <param name="afterItem">The insertion point appears after the item specified if this value is true; otherwise it appears before the specified item.</param>
            <returns><b>true</b> if successful, or <b>false</b> otherwise.</returns>
            <remarks><para>An insertion mark can appear only if the <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control is in <b>Icon</b>, <b>List</b> or <b>Thumbnails</b> view.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.GetItemPosition(System.Int32,System.Drawing.Point@)">
            <summary>Gets a position of the specified item.</summary>
            <param name="itemIndex">The item for which a position should be found.</param>
            <param name="position">Coordinates of the top-left corner of the item rectangle.</param>
            <returns>A value indicating if the position was found.</returns>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.GetItemRect(System.Int32)">
            <summary>Gets a region occupied by the specified item.</summary>
            <param name="itemIndex">The item for which a region should be determined.</param>
            <returns>A region occupied by the specified item.</returns>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.Gridlines">
            <summary>Gets/sets a value indicating whether grid lines should appear between the rows and columns containing the items and subitems in the control.</summary>
            <value><b>true</b> if grid lines are drawn around items and subitems; otherwise, <b>false</b>. The default is <b>false</b>.</value>
            <remarks>The <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.Gridlines" /> property has no effect unless the <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.View" /> property of the control is set to <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" />.</remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.HeaderStyle">
            <summary>Gets/sets the column header style of the <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" /> view.</summary>
            <value><see cref="T:System.Windows.Forms.ColumnHeaderStyle" /> value that specify the header style. The default is <see cref="F:System.Windows.Forms.ColumnHeaderStyle.Clickable" />.</value>
            <remarks><para>The <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.HeaderStyle" /> property allows you to specify whether the column headers will function as clickable buttons. If the <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.HeaderStyle" /> property is set to <see cref="F:System.Windows.Forms.ColumnHeaderStyle.Clickable" />, column headers act like buttons that users can click to perform an action, such as sorting the items in the list control using the items in the clicked column as a key.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.HideSelection">
            <summary>Gets/sets a value indicating whether a selected item in the control remains highlighted when the control looses focus.</summary>
            <value><b>true</b> if the selected item does not appear highlighted when the control looses focus; <b>false</b>, otherwise. The default value is <b>false</b>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.HitTest(System.Int32,System.Int32)" draft="yes">
            <summary>Determines which list-view item, if any, is at a specified position.</summary>
            <param name="x">X-coordinate of the position to test.</param>
            <param name="y">Y-coordinate of the position to test.</param>
            <returns>An index of the item at specified position, if any, or -1 otherwise.</returns>
            <remarks><para>Coordinates are interpreted relatively the control client area. It does not depend on the scrolling position, etc. </para></remarks>
            <overloads><summary>Determines which list-view item, if any, is at a specified position.</summary><remarks><para>Coordinates are interpreted relatively the control client area. It does not depend on the scrolling position, etc. </para></remarks></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.HitTest(System.Drawing.Point)" draft="yes">
            <summary>Determines which list-view item, if any, is at a specified position.</summary>
            <param name="point">The coordinates of point to test.</param>
            <returns>An index of the item at specified position, if any, or -1 otherwise.</returns>
            <remarks><para>Coordinates are interpreted relatively the control client area. It does not depend on the scrolling position, etc. </para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.HoverSelection">
            <summary>Gets/sets a value indicating whether an item is automatically selected when the mouse pointer remains over the item for a few seconds.</summary>
            <value><b>true</b> if item is automatically selected when the mouse pointer hovers over it; otherwise, <b>false</b>. Default is <b>false</b>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.IconicViewTextInfoId">
            <summary>Specifies type of the text information to be displayed for each item in all view modes, except of the <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" />.</summary>
            <value>An identifier of the item piece of information to be displayed under each item.</value>
            <remarks><para><see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem" /> class provides access to the following pieces of text information: </para><list type="table"><listheader><term> Constant </term><description> Description </description></listheader><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdCreationDate" /></term><description>File creation date.
</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdDisplayName" /></term><description>Display name of the item (its file name without path with or without extention depending on Windows settings).
</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdFileSize" /></term><description>File size.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdFileType" /></term><description>File type name (as registered in Windows).</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdPath" /></term><description>Full path to the file.</description></item></list><para>If you implement your own list items, you should define identifiers of pieces of text information yourself.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.IconSpacing">
            <summary>Specifies space occupied by items in all view modes, except for <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" />.</summary>
            <value>Space occupied by an item.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.InsertMarkHitTest(System.Int32,System.Int32,System.Int32@,System.Boolean@)" draft="yes">
            <summary>Tests what item insertion mark is closest to a specified point.</summary>
            <param name="x">X-coordinate of the position to test.</param>
            <param name="y">Y-coordinate of the position to test.</param>
            <param name="index">An integer value that receives an index of the item next to the insertion mark.</param>
            <param name="afterItem">A <see cref="T:System.Boolean" /> value which specifies whether the insertion point should appear after the item (when the value is <b>true</b>) or before it (when the value is <b>false</b>).</param>
            <returns><b>true</b> if successful, <b>false</b> otherwise.</returns>
            <remarks><para>An insertion mark does not make sense for <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" /> view.</para><para>Coordinates are interpreted relatively the control client area. It does not depend on the scrolling position, etc. </para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.InsertMarkHitTest(System.Drawing.Point,System.Int32@,System.Boolean@)" draft="yes">
            <summary>Tests what item insertion mark is closest to a specified point.</summary>
            <param name="point">The coordinates of point to test.</param>
            <param name="index">An integer value that receives an index of the item next to the insertion mark.</param>
            <param name="afterItem">A <see cref="T:System.Boolean" /> value which specifies whether the insertion point should appear after the item (when the value is <b>true</b>) or before it (when the value is <b>false</b>).</param>
            <returns><b>true</b> if successful, <b>false</b> otherwise.</returns>
            <remarks><para>An insertion mark does not make sense for <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" /> view.</para><para>Coordinates are interpreted relatively the control client area. It does not depend on the scrolling position, etc. </para></remarks>
            <overloads><summary>Tests what item insertion mark is closest to a specified point.</summary><remarks><para>An insertion mark does not make sense for <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" /> view.</para><para>Coordinates are interpreted relatively the control client area. It does not depend on the scrolling position, etc. </para></remarks></overloads>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.VirtualListView.ItemActivate">
            <summary>Fires when an item has been activated by the user (i.e. when the user expect to open the focused item).</summary>
            <remarks><para>The user can activate an item with either a single-click or double-click, depending on the value of the <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.Activation" /> property. Also, the item can be activated via the keyboard.</para></remarks>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.VirtualListView.ItemDrag">
            <summary>Fires when the user begins to drag an item.</summary>
            <remarks><para>This event occurs when the user begins dragging an item. Typically its handler performs the task of dragging by calling the <see cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" /> method. You can use it to drag items into and out of your application's <see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListView" /> control.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.LabelEdit">
            <summary>Gets/sets a value indicating whether the user can edit labels of items in the control.</summary>
            <value><b>true</b> if the user can edit the labels of items at run time; otherwise, <b>false</b>. The default is <b>false</b>.</value>
            <remarks><para>
When the <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.LabelEdit" /> property is set to <b>true</b>, the user is able to modify the text of an item by clicking the item text to select it and then clicking the item text again to put the label text into edit mode. The user can then modify or replace the item text label. You can use the <see cref="E:Aurigma.GraphicsMill.WinControls.VirtualListView.LabelEditing" /> and <see cref="E:Aurigma.GraphicsMill.WinControls.VirtualListView.LabelEdited" /> events to perform operations before and after the user edits an item text. The text of subitems cannot be modified by the user if this property is set to <b>true</b>. </para></remarks>
            <seealso cref="E:Aurigma.GraphicsMill.WinControls.VirtualListView.LabelEditing" />
<seealso cref="E:Aurigma.GraphicsMill.WinControls.VirtualListView.LabelEdited" />
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.VirtualListView.LabelEdited">
            <summary>Fires when the label of an item has been changed by the user.</summary>
            <remarks><para>This event fires when the user renames an item and the focus leaves the text box. You can use this event to reflect changes (e.g. to rename the file name, etc).</para><para>To be able to rename items, set <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.LabelEdit" /> property to <b>true</b>.</para></remarks>
            <seealso cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.LabelEdit" />
<seealso cref="E:Aurigma.GraphicsMill.WinControls.VirtualListView.LabelEditing" />
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.VirtualListView.LabelEditing">
            <summary>Fires when the item label is about to be edited.</summary>
            <remarks><para>You can use this event to perform some actions or validate item/internal application state and possibly cancel label editing for the item.</para></remarks>
            <seealso cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.LabelEdit" />
<seealso cref="E:Aurigma.GraphicsMill.WinControls.VirtualListView.LabelEdited" />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.LabelWrap">
            <summary>Gets/sets a value which enables/disables item labels wrapping when items are displayed in the control as icons.</summary>
            <value><b>true</b> if item labels wrap when items are displayed as icons; otherwise, <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.ListItemBackgroundColor">
            <summary>Gets/sets a background color of each item.</summary>
            <value>A color that fills the background for each item.</value>
            <remarks><para>Every new added item will be blended with the specified background color.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.ListItemBackgroundImage">
            <summary>Gets/sets a background image drawn under each item.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.Bitmap" /> object that represents a background image for each item.</value>
            <remarks><para>Every new added item will be blended with the specified background image. If dimensions of the specified background image are not equal to the thumbnail dimensions (that are defined by the <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.ThumbnailSize" /> property), the background image will be resized. Changes to the background image do not affect already created items.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.ListItemForegroundImage">
            <summary>Gets/sets a foreground image drawn on each item.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.Bitmap" /> object that represents a foreground image for each item.</value>
            <remarks><para>Every new added item will be blended with the specified foreground image. If dimensions of the specified foreground image are not equal to the thumbnail dimensions (that are defined by the <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.ThumbnailSize" /> property), the foreground image will be resized. Changes to the foreground image do not affect already created items.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.MoveItemToWorkArea(System.Int32,System.Int32)">
            <summary>Places the item to the specified working area.</summary>
            <param name="itemIndex">The item for which should be added to the working area.</param>
            <param name="workAreaIndex">The working area where the item should be placed.</param>
            <remarks><para>Working areas are rectangular virtual areas that the control uses to arrange items. A working area is not a window and cannot have a visible border. By default, the control has no working areas.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.MultiSelect">
            <summary>Gets/sets a value indicating whether multiple items can be selected.</summary>
            <value><b>true</b> if multiple items can be selected at one time; otherwise, <b>false</b>. By default is <b>true</b>.</value>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.#ctor">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.OnBackgroundImageChanged(System.EventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.OnBeginDrag(System.Int32,System.Windows.Forms.MouseButtons)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.OnHandleCreated(System.EventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.OnItemActivate(System.EventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.OnLabelEdited(System.Int32,System.String)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.OnLabelEditing(System.Int32)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.OnSelectedItemsChanged(System.EventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.OnViewChanged(Aurigma.GraphicsMill.WinControls.View)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.QueueManager">
            <summary>Gets the queue manager object which is used to optimize asynchronous access to the collection items.</summary>
            <value>A <see cref="T:Aurigma.GraphicsMill.WinControls.QueueManager" /> class instance that represents the queue manager of the collection.</value>
            <remarks><para>Use this property when you implement your own type of list items (see the <see cref="T:Aurigma.GraphicsMill.WinControls.IQueueItem" /> interface overview for more details). If you use only standard implementation of the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" /> interface, there is no need to use this property directly.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.ReflectNotify(System.Windows.Forms.Message@)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.RegisterEvents">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.Scroll(System.Int32,System.Int32)">
            <summary>Moves scroll bars by the specified values.</summary>
            <param name="dx">Shift of the horizontal scroll bar.</param>
            <param name="dy">Shift of the vertical scroll bar.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.ScrollHorizontally(System.Boolean,System.Boolean)">
            <summary>Moves the horizontal scroll bar.</summary>
            <param name="scrollForward">A value that specifies if the scroll bar should be moved forward.</param>
            <param name="scrollPage">A value that whole page should be scrolled.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.ScrollVertically(System.Boolean,System.Boolean)">
            <summary>Moves the vertical scroll bar.</summary>
            <param name="scrollForward">A value that specifies if the scroll bar should be moved forward.</param>
            <param name="scrollPage">A value that whole page should be scrolled.</param>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.VirtualListView.SelectedItemsChanged">
            <summary>Fires when the set of currently selected items has been changed (items are added or removed).</summary>
            <remarks><para>Use the <see cref="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.SelectedIndices" /> or <see cref="P:Aurigma.GraphicsMill.WinControls.ThumbnailListView.SelectedItems" /> to get access to currently selected items.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.SetImageList(Aurigma.GraphicsMill.WinControls.View,System.IntPtr)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.SetInsertMark(System.Int32,System.Boolean)">
            <summary>Sets the insertion point to the defined position.</summary>
            <param name="index">An index of the item next to one the insertion point should appear near.</param>
            <param name="afterItem">If <b>true</b> insertion point appears after the specified item; otherwise it appears before.</param>
            <remarks><para>An insertion mark does not make sense for <see cref="F:Aurigma.GraphicsMill.WinControls.View.Details" /> view.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.SetItemPosition(System.Int32,System.Drawing.Point)">
            <summary>Sets a position of the specified item.</summary>
            <param name="itemIndex">The item for which a position should be set.</param>
            <param name="position">Coordinates of the top-left corner of the item rectangle.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.Sort(System.Int32,System.Boolean)">
            <summary>Sorts items inside the control according to specified criteria.</summary>
            <param name="textInfoId">An integer value that specify the item details identifier used as a criteria for sorting.</param>
            <param name="sortAscending"><b>true</b> if sorting should be done ascending; <b>false</b> if descending.</param>
            <remarks><para><see cref="T:Aurigma.GraphicsMill.WinControls.ThumbnailListItem" /> class provides access to the following pieces of text information: </para><list type="table"><listheader><term> Constant </term><description> Description </description></listheader><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdCreationDate" /></term><description>File creation date.
</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdDisplayName" /></term><description>Display name of the item (its file name without path with or without extention depending on Windows settings).
</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdFileSize" /></term><description>File size.</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdFileType" /></term><description>File type name (as registered in Windows).</description></item><item><term><see cref="F:Aurigma.GraphicsMill.WinControls.ThumbnailListItem.TextInfoIdPath" /></term><description>Full path to the file.</description></item></list><para>If you implement your own list items, you should define identifiers of pieces of text information yourself.</para></remarks>
            <overloads><summary>Sorts items inside the control.</summary></overloads>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.Sort(System.Collections.IComparer)">
            <summary>Sorts items inside the control using custom comparer object.</summary>
            <param name="comparer">Custom <see cref="T:System.Collections.IComparer" /> interface implementation which should be used for sorting.</param>
            <remarks><para>The specified <see cref="T:System.Collections.IComparer" /> object will receive pairs of the <see cref="T:Aurigma.GraphicsMill.WinControls.IListItem" />s to compare.</para></remarks>
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.ThumbnailSize">
            <summary>Gets/sets a size of thumbnails when <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.View" /> property is set to <see cref="F:Aurigma.GraphicsMill.WinControls.View.Thumbnails" />.</summary>
            <value>A size of the thumbnail (in pixels).</value>
            <remarks><para>Keep in mind that the actual dimensions of the thumbnail differs from the size specified here. Thumbnails always keep aspect ratio of the original image. That is why it is guarantied that only one dimension will coincide.</para><para>Also, if the original image is smaller than specified size, it will not be resized.</para></remarks>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.UnregisterEvents">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.UpdateExtendedStyles">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.UpdateItem(System.Int32)">
            <summary>Invalidates a list item and causes it to be repainted.</summary>
            <param name="index">An item that should be updated.</param>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.UpdateStyles">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.View">
            <summary>Gets/sets a view mode of the control.</summary>
            <value><see cref="T:Aurigma.GraphicsMill.WinControls.View" /> value that determines how items are displayed in the control.</value>
        </member>
        <member name="E:Aurigma.GraphicsMill.WinControls.VirtualListView.ViewChanged">
            <summary>Fires when <see cref="P:Aurigma.GraphicsMill.WinControls.VirtualListView.View" /> mode of the control has been changed.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.VirtualListView.WndProc(System.Windows.Forms.Message@)">
            <exclude />
        </member>
        <member name="P:Aurigma.GraphicsMill.WinControls.VirtualListView.WorkAreas">
            <summary>Gets/sets an array of working areas.</summary>
            <value>An array of rectangles representing working areas.</value>
            <remarks><para>Working areas are rectangular virtual areas that the control uses to arrange items. A working area is not a window and cannot have a visible border. By default, the control has no working areas. By creating a working area, you can arrange the items in a non-standard way or cause a horizontal scroll bar to be displayed when there normally would not be one.</para></remarks>

        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.WorkspaceBackgroundStyle">
            <summary>Contains the values that defines the background of the bitmap when it has alpha channel and alpha blending is enabled at the control (<see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.AlphaEnabled" /> property of the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> is <b>true</b>).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.WorkspaceBackgroundStyle.Grid">
            <summary>The checkboard grid is displayed. The primary checkboard color is specified by the <see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceBackColor1" /> property, the secondary one - by the <see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceBackColor2" /> property of the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" />.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.WorkspaceBackgroundStyle.None">
            <summary>No specific background for the image is used. The background color is the same as a background color of the entire control.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.WorkspaceBackgroundStyle.Solid">
            <summary>The background is filled with the solid color. This color is specified with the <see cref="P:Aurigma.GraphicsMill.WinControls.BitmapViewer.WorkspaceBackColor1" /> property.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ZoomInNavigator">
            <summary>This class represents a navigator which is used to zoom the image displayed in the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> control in by the mouse click.</summary>
            <remarks><para>When this navigator is attached to the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> using its property <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Navigator" />, it is working in the following way:</para><list type="number"><item><description>When the left button of the mouse is clicked, it zooms the image in.</description></item><item><description>When the right button of the mouse is clicked, it zooms the image out.</description></item></list></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ZoomInNavigator.#ctor">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ZoomInNavigator" /> class instance.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ZoomInNavigator.OnViewerContentChanged(System.EventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ZoomInNavigator.OnViewerMouseDown(System.Windows.Forms.MouseEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ZoomInNavigator.OnViewerZoomed(System.EventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ZoomInNavigator.UpdateCursor(System.Boolean,System.Drawing.Point)">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ZoomMode">
            <summary>Contains possible values for the zooming modes.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ZoomMode.BestFit">
            <summary>Zoom modifier is calculated automatically so that entire image could fit the control. If image is smaller than the control client area, the image is stretched to occupy as much area as possible.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ZoomMode.BestFitShrinkOnly">
            <summary>Zoom modifier is calculated automatically so that entire image could fit the control. If image is smaller than the control client area, zooming modifier is set to 1 (i.e. no zoom).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ZoomMode.FitToHeight">
            <summary>Zoom modifier is calculated automatically so that the image height would be the same as the control client area height. If the image height is smaller than the control client area height, image is stretched.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ZoomMode.FitToHeightShrinkOnly">
            <summary>Zoom modifier is calculated automatically so that the image height would be the same as the control client area height. If the image height is smaller than the control client area height, zooming modifier is set to 1 (i.e. no zoom).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ZoomMode.FitToWidth">
            <summary>Zoom modifier is calculated automatically so that the image width would be the same as the control client area width. If the image width is smaller than the control client area width, image is stretched.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ZoomMode.FitToWidthShrinkOnly">
            <summary>Zoom modifier is calculated automatically so that the image width would be the same as the control client area width. If the image width is smaller than the control client area width, zooming modifier is set to 1 (i.e. no zoom).</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ZoomMode.None">
            <summary>Zoom modifier is specified only manually. Use <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Zoom" /> property. Also, you can use some zooming navigator controls.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ZoomMode.ZoomControl">
            <summary>The control is resized to have the same client area as the image dimensions.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ZoomOutNavigator">
            <summary>This class represents a navigator which is used to zoom the image displayed in the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> control out by the mouse click.</summary>
            <remarks><para>When this navigator is attached to the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> using its property <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Navigator" />, it is working in the following way:</para><list type="number"><item><description>When the left button of the mouse is clicked, it zooms the image out.</description></item><item><description>When the right button of the mouse is clicked, it zooms the image in.</description></item></list></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ZoomOutNavigator.#ctor">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ZoomRectangleNavigator" /> class instance.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ZoomOutNavigator.OnViewerContentChanged(System.EventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ZoomOutNavigator.OnViewerMouseDown(System.Windows.Forms.MouseEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ZoomOutNavigator.OnViewerZoomed(System.EventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ZoomOutNavigator.UpdateCursor(System.Boolean,System.Drawing.Point)">
            <exclude />
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ZoomQuality">
            <summary>Contains possible values for the zoom quality of the image displayed in the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> control.</summary>
            <remarks>Higher zoom quality means that more resourses is used during zooming and it is working slower.</remarks>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ZoomQuality.High">
            <summary>High quality.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ZoomQuality.Low">
            <summary>Low quality.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ZoomQuality.Medium">
            <summary>Medium quality.</summary>
        </member>
        <member name="F:Aurigma.GraphicsMill.WinControls.ZoomQuality.ShrinkHighStretchLow">
            <summary>High quality when image is shrunk, low quality when it is stretched.</summary>
        </member>
        <member name="T:Aurigma.GraphicsMill.WinControls.ZoomRectangleNavigator">
            <summary>This class represents a navigator which is used to zoom the image displayed in the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> control by selecting necessary portion of the image by the mouse.</summary>
            <remarks><para>When this navigator is attached to the <see cref="T:Aurigma.GraphicsMill.WinControls.BitmapViewer" /> using its property <see cref="P:Aurigma.GraphicsMill.WinControls.ViewerBase.Navigator" />, it is working in the following way:</para><list type="number"><item><description>When the left button of the mouse is pressed down, it captures the control.</description></item><item><description>When control is captured and the mouse is moved, the selection rectangle is displayed and stretched.</description></item><item><description>When the left button of the mouse is released, the control zooms the image so that the selected portion occupy as much control client area as aspect ratio allows.</description></item></list></remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ZoomRectangleNavigator.#ctor">
            <summary>Creates and initializes new <see cref="T:Aurigma.GraphicsMill.WinControls.ZoomOutNavigator" /> class instance.</summary>
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ZoomRectangleNavigator.OnViewerMouseDown(System.Windows.Forms.MouseEventArgs)">
            <exclude />
        </member>
        <member name="M:Aurigma.GraphicsMill.WinControls.ZoomRectangleNavigator.OnViewerMouseUp(System.Windows.Forms.MouseEventArgs)">
            <exclude />
        </member>
    </members>
</doc>
